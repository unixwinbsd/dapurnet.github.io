<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://192.168.5.71:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://192.168.5.71:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-03-13T00:22:17+07:00</updated><id>http://192.168.5.71:4000/feed.xml</id><title type="html">UnixBSDShell</title><subtitle>A Blog That Focuses On UNIX Systems, Such As FreeBSD OpenBSD NetBSD and Others</subtitle><author><name>Iwan Setiawan</name></author><entry><title type="html">Welcome to Jekyll!</title><link href="http://192.168.5.71:4000/jekyll/update/2025/03/12/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2025-03-12T23:48:44+07:00</published><updated>2025-03-12T23:48:44+07:00</updated><id>http://192.168.5.71:4000/jekyll/update/2025/03/12/welcome-to-jekyll</id><content type="html" xml:base="http://192.168.5.71:4000/jekyll/update/2025/03/12/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Iwan Setiawan</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">How does PackageReference work?</title><link href="http://192.168.5.71:4000/.net/msbuild/nuget/2022/06/06/how-does-packagereference-work/" rel="alternate" type="text/html" title="How does PackageReference work?" /><published>2022-06-06T00:00:00+07:00</published><updated>2022-06-06T00:00:00+07:00</updated><id>http://192.168.5.71:4000/.net/msbuild/nuget/2022/06/06/how-does-packagereference-work</id><content type="html" xml:base="http://192.168.5.71:4000/.net/msbuild/nuget/2022/06/06/how-does-packagereference-work/"><![CDATA[<p><a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files" target="_blank"><code class="language-plaintext highlighter-rouge">PackageReference</code></a> has replaced <a href="https://docs.microsoft.com/en-us/nuget/reference/packages-config" target="_blank"><code class="language-plaintext highlighter-rouge">packages.config</code></a> as the primary mechanism for consuming NuGet packages. For those looking to migrate, there is <a href="https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference" target="_blank">documentation</a> available to help you. But how does it actually work under the hood?</p>

<p>Historically with <code class="language-plaintext highlighter-rouge">packages.config</code> files, NuGet’s role was simply to download the exact packages at the exact versions you specified, and then copy the packages into a repository-relative path configured in your <a href="https://docs.microsoft.com/en-us/nuget/reference/nuget-config-file" target="_blank"><code class="language-plaintext highlighter-rouge">NuGet.Config</code></a> file, usually <code class="language-plaintext highlighter-rouge">/packages</code>. Actually consuming the package contents was ultimately up to the consuming projects, however the Visual Studio Package Manager UI would help update the relevant project with various <code class="language-plaintext highlighter-rouge">&lt;Import&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;Reference&gt;</code>, and <code class="language-plaintext highlighter-rouge">&lt;Content&gt;</code> elements based on convention.</p>

<p>With <code class="language-plaintext highlighter-rouge">PackageReference</code>, <a href="https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package#from-a-convention-based-working-directory" target="_blank">these conventions</a> have been effectively codified. It becomes very cumbersome to consume packages these days which do not conform to the conventions. Additionally <code class="language-plaintext highlighter-rouge">PackageReference</code> adds much-needed quality-of-life features, such as automatically pulling in dependencies and unifying package versions.</p>

<h2 id="restore">Restore</h2>

<p>As I hinted earlier, NuGet’s job previously was to download packages only, so a <code class="language-plaintext highlighter-rouge">nuget restore</code> of a packages.config file did that and only that. Now with <code class="language-plaintext highlighter-rouge">PackageReference</code>, the restore process does not only that but also generates files per-project which describe the contents of each consumed package and is used during the build to dynamically add the equivalents of the previous <code class="language-plaintext highlighter-rouge">&lt;Import&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;Reference&gt;</code>, and <code class="language-plaintext highlighter-rouge">&lt;Content&gt;</code> elements which were present in projects.</p>

<p>One benefit of these generated files is that the project files are left much cleaner. The project file simply has a <code class="language-plaintext highlighter-rouge">PackageReference</code>, rather than consuming a bunch of stuff which happens to all be from a path inside that package with lots of duplication.</p>

<p>Another benefit is that the copy of all package contents from the <a href="https://docs.microsoft.com/en-us/nuget/Consume-Packages/managing-the-global-packages-and-cache-folders" target="_blank">global package cache</a> to the repository-relative <code class="language-plaintext highlighter-rouge">/packages</code> directory is no longer necessary as the generated files can point directly into the global package cache. This can save a lot of disk space and a lot of restore time (at least in a clean repository). Note that the global package cache is <code class="language-plaintext highlighter-rouge">%UserProfile%\.nuget\packages</code> by default on Windows machines, but can be redirected as desired, for example to the same drive as your code which is ideally an SSD, by setting <code class="language-plaintext highlighter-rouge">%NUGET_PACKAGES%</code>.</p>

<p>These generated files are output to <code class="language-plaintext highlighter-rouge">$(RestoreOutputPath)</code>, which by default is <code class="language-plaintext highlighter-rouge">$(MSBuildProjectExtensionsPath)</code>, which by default is <code class="language-plaintext highlighter-rouge">$(BaseIntermediateOutputPath)</code>, which by default is <code class="language-plaintext highlighter-rouge">obj\</code> (Phew). The notable generated files are <code class="language-plaintext highlighter-rouge">project.assets.json</code>, <code class="language-plaintext highlighter-rouge">&lt;project-file&gt;.nuget.g.props</code>, and <code class="language-plaintext highlighter-rouge">&lt;project-file&gt;.nuget.g.targets</code>.</p>

<p>An interesting but important note is that <code class="language-plaintext highlighter-rouge">PackageReference</code> items are only used during the restore. During the build, any package related information comes from the files generated during the restore.</p>

<p>Let’s start with the generated props and targets files as they’re more straightforward.</p>

<h2 id="generated-props-and-targets">Generated props and targets</h2>

<p>These generated props file is imported by this line in <a href="https://github.com/dotnet/msbuild/blob/main/src/Tasks/Microsoft.Common.props" target="_blank"><code class="language-plaintext highlighter-rouge">Microsoft.Common.props</code></a> (which is imported by <a href="https://github.com/dotnet/sdk" target="_blank"><code class="language-plaintext highlighter-rouge">Microsoft.NET.Sdk</code></a>):</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">"$(MSBuildProjectExtensionsPath)$(MSBuildProjectFile).*.props"</span> <span class="na">Condition=</span><span class="s">"'$(ImportProjectExtensionProps)' == 'true' and exists('$(MSBuildProjectExtensionsPath)')"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>Similarly, the targets file is imported by a similar like in <a href="https://github.com/dotnet/msbuild/blob/main/src/Tasks/Microsoft.Common.targets" target="_blank"><code class="language-plaintext highlighter-rouge">Microsoft.Common.targets</code></a>.</p>

<p>The props file always defines a few properties which NuGet uses at build time like <code class="language-plaintext highlighter-rouge">$(ProjectAssetsFile)</code>, but the interesting part to a consumer is that the <code class="language-plaintext highlighter-rouge">&lt;Import&gt;</code> elements into packages which used to be directly in the projects are generated to these files, the packages’ <code class="language-plaintext highlighter-rouge">build\&lt;package-name&gt;.props</code> in the <code class="language-plaintext highlighter-rouge">&lt;project-file&gt;.nuget.g.props</code> and the <code class="language-plaintext highlighter-rouge">build\&lt;package-name&gt;.targets</code> in the <code class="language-plaintext highlighter-rouge">&lt;project-file&gt;.nuget.g.targets</code>.</p>

<p>As an example, you’ll see a section similar to this in the generated props file for a unit test project using <a href="https://xunit.net/" target="_blank">xUnit</a>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;ImportGroup</span> <span class="na">Condition=</span><span class="s">"'$(ExcludeRestorePackageImports)' != 'true'"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">"$(NuGetPackageRoot)xunit.runner.visualstudio\2.4.3\build\netcoreapp2.1\xunit.runner.visualstudio.props"</span> <span class="na">Condition=</span><span class="s">"Exists('$(NuGetPackageRoot)xunit.runner.visualstudio\2.4.3\build\netcoreapp2.1\xunit.runner.visualstudio.props')"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">"$(NuGetPackageRoot)xunit.core\2.4.1\build\xunit.core.props"</span> <span class="na">Condition=</span><span class="s">"Exists('$(NuGetPackageRoot)xunit.core\2.4.1\build\xunit.core.props')"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">"$(NuGetPackageRoot)microsoft.testplatform.testhost\17.1.0\build\netcoreapp2.1\Microsoft.TestPlatform.TestHost.props"</span> <span class="na">Condition=</span><span class="s">"Exists('$(NuGetPackageRoot)microsoft.testplatform.testhost\17.1.0\build\netcoreapp2.1\Microsoft.TestPlatform.TestHost.props')"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">"$(NuGetPackageRoot)microsoft.codecoverage\17.1.0\build\netstandard1.0\Microsoft.CodeCoverage.props"</span> <span class="na">Condition=</span><span class="s">"Exists('$(NuGetPackageRoot)microsoft.codecoverage\17.1.0\build\netstandard1.0\Microsoft.CodeCoverage.props')"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">"$(NuGetPackageRoot)microsoft.net.test.sdk\17.1.0\build\netcoreapp2.1\Microsoft.NET.Test.Sdk.props"</span> <span class="na">Condition=</span><span class="s">"Exists('$(NuGetPackageRoot)microsoft.net.test.sdk\17.1.0\build\netcoreapp2.1\Microsoft.NET.Test.Sdk.props')"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ImportGroup&gt;</span>
</code></pre></div></div>

<p>Note that <code class="language-plaintext highlighter-rouge">$(NuGetPackageRoot)</code> is the global package cache directory as described earlier and is defined earlier in the same generated props file.</p>

<p>The generated props file also defines properties which point to package root directories for packages which have the <a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#generatepathproperty" target="_blank"><code class="language-plaintext highlighter-rouge">GeneratePathProperty</code></a> metadata defined. These properties look like <code class="language-plaintext highlighter-rouge">$(PkgNormalized_Package_Name)</code> and are mostly used as an escape valve for package which don’t properly follow the conventions and using custom build logic in the project file to reach into the package is required.</p>

<p>Next we’ll explore the <code class="language-plaintext highlighter-rouge">project.assets.json</code> file.</p>

<h2 id="project-assets-file">Project Assets File</h2>

<p>The <code class="language-plaintext highlighter-rouge">project.assets.json</code> file contains a boatload of information. It describes the full package dependency graph for each target framework the project targets, a list of the contents of all packages in the graph, the package folders the packages exist at, the list of project references, and various other miscellany.</p>

<p>Here is an example of the basic structure, with many omissions for brevity:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"targets"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"net6.0"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"xunit/2.4.1"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"package"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"xunit.analyzers"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.10.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"xunit.assert"</span><span class="p">:</span><span class="w"> </span><span class="s2">"[2.4.1]"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"xunit.core"</span><span class="p">:</span><span class="w"> </span><span class="s2">"[2.4.1]"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"xunit.analyzers/0.10.0"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"package"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"ExampleClassLibrary/1.0.0"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"project"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"framework"</span><span class="p">:</span><span class="w"> </span><span class="s2">".NETCoreApp,Version=v6.0"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">dependency</span><span class="w"> </span><span class="err">project's</span><span class="w"> </span><span class="err">package</span><span class="w"> </span><span class="err">dependencies</span><span class="w"> </span><span class="err">...</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">other</span><span class="w"> </span><span class="err">transitive</span><span class="w"> </span><span class="err">package</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">project</span><span class="w"> </span><span class="err">dependencies</span><span class="w"> </span><span class="err">...</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"libraries"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"xunit/2.4.1"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"sha512"</span><span class="p">:</span><span class="w"> </span><span class="s2">"XNR3Yz9QTtec16O0aKcO6+baVNpXmOnPUxDkCY97J+8krUYxPvXT1szYYEUdKk4sB8GOI2YbAjRIOm8ZnXRfzQ=="</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"package"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"xunit/2.4.1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"files"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">".nupkg.metadata"</span><span class="p">,</span><span class="w">
        </span><span class="s2">".signature.p7s"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"xunit.2.4.1.nupkg.sha512"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"xunit.nuspec"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"ExampleClassLibrary/1.0.0"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"project"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"../src/ExampleClassLibrary.csproj"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"msbuildProject"</span><span class="p">:</span><span class="w"> </span><span class="s2">"../src/ExampleClassLibrary.csproj"</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">other</span><span class="w"> </span><span class="err">transitive</span><span class="w"> </span><span class="err">package</span><span class="w"> </span><span class="err">dependencies'</span><span class="w"> </span><span class="err">contents</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">transitive</span><span class="w"> </span><span class="err">project</span><span class="w"> </span><span class="err">dependencies'</span><span class="w"> </span><span class="err">paths</span><span class="w"> </span><span class="err">...</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"projectFileDependencyGroups"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"net6.0"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"ExampleClassLibrary &gt;= 1.0.0"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Microsoft.NET.Test.Sdk &gt;= 17.2.0"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"xunit &gt;= 2.4.1"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"xunit.runner.visualstudio &gt;= 2.4.5"</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"packageFolders"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"C:\\Users\\David\\.nuget\\packages\\"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
    </span><span class="nl">"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
    </span><span class="nl">"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder"</span><span class="p">:</span><span class="w"> </span><span class="p">{}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"project"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="err">various</span><span class="w"> </span><span class="err">information</span><span class="w"> </span><span class="err">about</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">project</span><span class="w"> </span><span class="err">...</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Examples of why one might want to look at this file are be to understand where a dependency is coming from or why a dependency version is resolving the way that it is.</p>

<p>The <code class="language-plaintext highlighter-rouge">ResolvePackageAssets</code> target reads the <code class="language-plaintext highlighter-rouge">project.assets.json</code> file to translate its contents into various items, like <code class="language-plaintext highlighter-rouge">ResolvedAnalyzers</code>, <code class="language-plaintext highlighter-rouge">_TransitiveProjectReferences</code>, <code class="language-plaintext highlighter-rouge">ResolvedCompileFileDefinitions</code> (which end up becoming <code class="language-plaintext highlighter-rouge">Analyzer</code>, <code class="language-plaintext highlighter-rouge">ProjectReference</code>, and <code class="language-plaintext highlighter-rouge">Reference</code> items respectively), and everything else which is used from a package.</p>

<p>Now why the <code class="language-plaintext highlighter-rouge">ResolvePackageAssets</code> target exists as opposed to NuGet just generating these items in the generated props and targets files is anyone’s guess. It seems like that would be much simpler, straightforward, and performant. A complaint I have which I also see from others is that there is too much black-box magic, especially in <code class="language-plaintext highlighter-rouge">ResolvePackageAssets</code>, but it is what it is.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope this helps shed some light on how <code class="language-plaintext highlighter-rouge">PackageReference</code> works, explains why it’s better than the legacy <code class="language-plaintext highlighter-rouge">packages.config</code>, and provides some of the details which can help with understanding and debugging your build.</p>]]></content><author><name>Iwan Setiawan</name></author><category term=".NET" /><category term="MSBuild" /><category term="NuGet" /><category term=".NET" /><category term="nuget" /><category term="msbuild" /><summary type="html"><![CDATA[PackageReference has replaced packages.config as the primary mechanism for consuming NuGet packages. For those looking to migrate, there is documentation available to help you. But how does it actually work under the hood?]]></summary></entry><entry><title type="html">Did you forget to set the alarm?</title><link href="http://192.168.5.71:4000/home%20automation/2022/02/17/did-you-forget-to-set-the-alarm/" rel="alternate" type="text/html" title="Did you forget to set the alarm?" /><published>2022-02-17T00:00:00+07:00</published><updated>2022-02-17T00:00:00+07:00</updated><id>http://192.168.5.71:4000/home%20automation/2022/02/17/did-you-forget-to-set-the-alarm</id><content type="html" xml:base="http://192.168.5.71:4000/home%20automation/2022/02/17/did-you-forget-to-set-the-alarm/"><![CDATA[<p>After <a href="/home%20automation/self%20hosting/2020/04/25/setting-up-a-security-system-with-home-assistant/">setting up my security system</a> in <a href="https://www.home-assistant.io/" target="_blank">Home Assistant</a>, a common problem my wife and I ran into was remembering to arm it when we left the house. A security system is only effective when you use it, and we just could not consistently remember to set it.</p>

<p>In general, we want to arm the alarm when we’re not home. However, instead of doing it automatically, we preferred that a notification be sent to our phones reminding us to set it. This is because historically our presence detection has been a bit spotty, and there are also some scenarios where we might want to leave the alarm unarmed when we leave, for instance if we have guests and we need to run out to pick up take-out or something.</p>

<p>The individual components of this automation all seem pretty straightforward, but the state management gets a bit hairy. So let’s walk through it piece by piece.</p>

<p>First the trigger and condition. We want the automation to run when we leave the house and forget to arm the alarm. Note that I have a group set up containing all <code class="language-plaintext highlighter-rouge">person</code> entities, and each <code class="language-plaintext highlighter-rouge">person</code> has an associated device tracker (via the <a href="https://www.home-assistant.io/integrations/mobile_app/#mobile-app-documentation" target="_blank">Mobile App</a>). This is fairly straightforward:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">trigger</span><span class="pi">:</span>
    <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
    <span class="na">entity_id</span><span class="pi">:</span> <span class="s">group.all_people</span>
    <span class="na">to</span><span class="pi">:</span> <span class="s2">"</span><span class="s">not_home"</span>
  <span class="na">condition</span><span class="pi">:</span>
    <span class="na">condition</span><span class="pi">:</span> <span class="s">state</span>
    <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
    <span class="na">state</span><span class="pi">:</span> <span class="s">disarmed</span>
</code></pre></div></div>

<p>Next I wanted to just send a simple notification. I wanted the notification to come to both me and my wife’s phones, so I created a <a href="https://www.home-assistant.io/integrations/notify.group/" target="_blank">notify group</a> containing both in <code class="language-plaintext highlighter-rouge">configuration.yml</code>:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">notify</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">all_phones</span>
    <span class="na">platform</span><span class="pi">:</span> <span class="s">group</span>
    <span class="na">services</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">mobile_app_person1_phone</span>
      <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">mobile_app_person2_phone</span>
</code></pre></div></div>

<p>Now back in the automation, the group notification becomes pretty straightforward, including configuring it so that if you click on it, it brings you to the second lovelace tab (index 1) which is where my alarm panel card is:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">action</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Send notification</span>
      <span class="na">service</span><span class="pi">:</span> <span class="s">notify.all_phones</span>
      <span class="na">data</span><span class="pi">:</span>
        <span class="na">title</span><span class="pi">:</span> <span class="s">Home Alarm</span>
        <span class="na">message</span><span class="pi">:</span> <span class="s">Did you forget to set the alarm?</span>
        <span class="na">data</span><span class="pi">:</span>
          <span class="na">channel</span><span class="pi">:</span> <span class="s2">"</span><span class="s">home-alarm-reminder"</span>
          <span class="na">tag</span><span class="pi">:</span> <span class="s2">"</span><span class="s">home-alarm-reminder"</span>
          <span class="na">importance</span><span class="pi">:</span> <span class="s">max</span>
          <span class="na">priority</span><span class="pi">:</span> <span class="s">high</span>
          <span class="na">ttl</span><span class="pi">:</span> <span class="m">0</span>
          <span class="na">vibrationPattern</span><span class="pi">:</span> <span class="s">0, 250, 250, </span><span class="m">250</span>
          <span class="na">clickAction</span><span class="pi">:</span> <span class="s">/lovelace/1</span>
</code></pre></div></div>

<p>Next I wanted to make the notification <a href="https://companion.home-assistant.io/docs/notifications/actionable-notifications/" target="_blank">actionable</a> so that the alarm could be armed directly rather than having to navigate to HA and use the alarm panel card. This is where things get slightly more complex. Showing additional actions in the notification isn’t too much extra, but handling it and having it perform an action requires a bit of fanciness.</p>

<p>In particular, the <a href="https://www.home-assistant.io/docs/scripts/#wait-for-trigger" target="_blank"><code class="language-plaintext highlighter-rouge">wait_for_trigger</code></a> action is used to wait for an event corresponding to the notification action (<a href="https://companion.home-assistant.io/docs/notifications/actionable-notifications?_highlight=mobile_app_notification_action#building-notification-action-scripts" target="_blank"><code class="language-plaintext highlighter-rouge">mobile_app_notification_action</code></a>). This event also has a name associated with it, and a unique one is preferred so that it doesn’t collide with other notification actions. This can be done by dynamically defining a variable which uses the automation’s <code class="language-plaintext highlighter-rouge">context.id</code> as a way to guarantee uniqueness.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">action</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Set up variables</span>
      <span class="na">variables</span><span class="pi">:</span>
        <span class="c1"># Including an id in the action allows us to identify this script run</span>
        <span class="c1"># and not accidentally trigger for other notification actions</span>
        <span class="na">action_arm</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">'arm_'</span><span class="nv"> </span><span class="s">~</span><span class="nv"> </span><span class="s">context.id</span><span class="nv"> </span><span class="s">}}"</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Send notification</span>
      <span class="na">service</span><span class="pi">:</span> <span class="s">notify.all_phones</span>
      <span class="na">data</span><span class="pi">:</span>
        <span class="na">title</span><span class="pi">:</span> <span class="s">Home Alarm</span>
        <span class="na">message</span><span class="pi">:</span> <span class="s">Did you forget to set the alarm?</span>
        <span class="na">data</span><span class="pi">:</span>
          <span class="na">channel</span><span class="pi">:</span> <span class="s2">"</span><span class="s">home-alarm-reminder"</span>
          <span class="na">tag</span><span class="pi">:</span> <span class="s2">"</span><span class="s">home-alarm-reminder"</span>
          <span class="na">importance</span><span class="pi">:</span> <span class="s">max</span>
          <span class="na">priority</span><span class="pi">:</span> <span class="s">high</span>
          <span class="na">ttl</span><span class="pi">:</span> <span class="m">0</span>
          <span class="na">vibrationPattern</span><span class="pi">:</span> <span class="s">0, 250, 250, </span><span class="m">250</span>
          <span class="na">clickAction</span><span class="pi">:</span> <span class="s">/lovelace/1</span>
          <span class="na">actions</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">action</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">action_arm</span><span class="nv"> </span><span class="s">}}"</span>
              <span class="na">title</span><span class="pi">:</span> <span class="s">Arm Alarm</span>
            <span class="pi">-</span> <span class="na">action</span><span class="pi">:</span> <span class="s">URI</span>
              <span class="na">title</span><span class="pi">:</span> <span class="s">Open Alarm Panel</span>
              <span class="na">uri</span><span class="pi">:</span> <span class="s">/lovelace/1</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Wait for a response</span>
      <span class="na">wait_for_trigger</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">event</span>
          <span class="na">event_type</span><span class="pi">:</span> <span class="s">mobile_app_notification_action</span>
          <span class="na">event_data</span><span class="pi">:</span>
            <span class="na">action</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">action_arm</span><span class="nv"> </span><span class="s">}}"</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Perform the action</span>
      <span class="na">service</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm_arm_away</span>
      <span class="na">target</span><span class="pi">:</span>
        <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
</code></pre></div></div>

<p>So far so good. However, I wanted the notification to clear when the alarm was armed in some way (potentially by the other person), or we came back home. So this required some extra triggers in the <code class="language-plaintext highlighter-rouge">wait_for_trigger</code> to unblock the automation execution, a condition on the arming action, and a final action to execute for <a href="https://companion.home-assistant.io/docs/notifications/notifications-basic?_highlight=clear_notification#clearing" target="_blank">clearing the notification</a>.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Wait for a response</span>
      <span class="na">wait_for_trigger</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">event</span>
          <span class="na">event_type</span><span class="pi">:</span> <span class="s">mobile_app_notification_action</span>
          <span class="na">event_data</span><span class="pi">:</span>
            <span class="na">action</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">action_arm</span><span class="nv"> </span><span class="s">}}"</span>
        <span class="c1"># Stop waiting if it becomes moot (alarm gets set some other way or if we come home)</span>
        <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
          <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
          <span class="na">from</span><span class="pi">:</span> <span class="s">disarmed</span>
        <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
          <span class="na">entity_id</span><span class="pi">:</span> <span class="s">group.all_people</span>
          <span class="na">to</span><span class="pi">:</span> <span class="s">home</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Perform the action</span>
      <span class="na">choose</span><span class="pi">:</span>
        <span class="c1"># Handle the arm action</span>
        <span class="pi">-</span> <span class="na">conditions</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">(wait</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">defined)</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">(wait.trigger</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">not</span><span class="nv"> </span><span class="s">none)</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">(wait.trigger.event.data.action</span><span class="nv"> </span><span class="s">==</span><span class="nv"> </span><span class="s">action_arm)</span><span class="nv"> </span><span class="s">}}"</span>
          <span class="na">sequence</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm_arm_away</span>
              <span class="na">target</span><span class="pi">:</span>
                <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
    <span class="c1"># Clear notifications once an action is taken *or* after it becomes moot</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Clear notifications</span>
      <span class="na">service</span><span class="pi">:</span> <span class="s">notify.all_phones</span>
      <span class="na">data</span><span class="pi">:</span>
        <span class="na">message</span><span class="pi">:</span> <span class="s2">"</span><span class="s">clear_notification"</span>
        <span class="na">data</span><span class="pi">:</span>
          <span class="na">tag</span><span class="pi">:</span> <span class="s2">"</span><span class="s">home-alarm-reminder"</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">wait_for_trigger</code> now gets unblocked if the action is tapped, the alarm is armed, or we come home. This means the arming action needs to check that the wait trigger was specifically the action being tapped and not the other triggers. Finally, the notification is cleared from all phones, no matter which of the triggers unblocked execution.</p>

<p>Piecing everything together, this brings the full automation to the following:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># NOTE: This automation's primary purpose is simply to send a notification, but to manage the</span>
<span class="c1"># notification state, including clearing notifications once it's done, the automation doesn't</span>
<span class="c1"># finish running until either the alarm is set or someone returns home.</span>
<span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Alarm - Notification for disarmed alarm when no one is home</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">alarm_forget_notification</span>
  <span class="na">trigger</span><span class="pi">:</span>
    <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
    <span class="na">entity_id</span><span class="pi">:</span> <span class="s">group.all_people</span>
    <span class="na">to</span><span class="pi">:</span> <span class="s2">"</span><span class="s">not_home"</span>
  <span class="na">condition</span><span class="pi">:</span>
    <span class="na">condition</span><span class="pi">:</span> <span class="s">state</span>
    <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
    <span class="na">state</span><span class="pi">:</span> <span class="s">disarmed</span>
  <span class="na">action</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Set up variables</span>
      <span class="na">variables</span><span class="pi">:</span>
        <span class="c1"># Including an id in the action allows us to identify this script run</span>
        <span class="c1"># and not accidentally trigger for other notification actions</span>
        <span class="na">action_arm</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">'arm_'</span><span class="nv"> </span><span class="s">~</span><span class="nv"> </span><span class="s">context.id</span><span class="nv"> </span><span class="s">}}"</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Send notification</span>
      <span class="na">service</span><span class="pi">:</span> <span class="s">notify.all_phones</span>
      <span class="na">data</span><span class="pi">:</span>
        <span class="na">title</span><span class="pi">:</span> <span class="s">Home Alarm</span>
        <span class="na">message</span><span class="pi">:</span> <span class="s">Did you forget to set the alarm?</span>
        <span class="na">data</span><span class="pi">:</span>
          <span class="na">channel</span><span class="pi">:</span> <span class="s2">"</span><span class="s">home-alarm-reminder"</span>
          <span class="na">tag</span><span class="pi">:</span> <span class="s2">"</span><span class="s">home-alarm-reminder"</span>
          <span class="na">importance</span><span class="pi">:</span> <span class="s">max</span>
          <span class="na">priority</span><span class="pi">:</span> <span class="s">high</span>
          <span class="na">ttl</span><span class="pi">:</span> <span class="m">0</span>
          <span class="na">vibrationPattern</span><span class="pi">:</span> <span class="s">0, 250, 250, </span><span class="m">250</span>
          <span class="na">clickAction</span><span class="pi">:</span> <span class="s">/lovelace/1</span>
          <span class="na">actions</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">action</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">action_arm</span><span class="nv"> </span><span class="s">}}"</span>
              <span class="na">title</span><span class="pi">:</span> <span class="s">Arm Alarm</span>
            <span class="pi">-</span> <span class="na">action</span><span class="pi">:</span> <span class="s">URI</span>
              <span class="na">title</span><span class="pi">:</span> <span class="s">Open Alarm Panel</span>
              <span class="na">uri</span><span class="pi">:</span> <span class="s">/lovelace/1</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Wait for a response</span>
      <span class="na">wait_for_trigger</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">event</span>
          <span class="na">event_type</span><span class="pi">:</span> <span class="s">mobile_app_notification_action</span>
          <span class="na">event_data</span><span class="pi">:</span>
            <span class="na">action</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">action_arm</span><span class="nv"> </span><span class="s">}}"</span>
        <span class="c1"># Stop waiting if it becomes moot (alarm gets set some other way or if we come home)</span>
        <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
          <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
          <span class="na">from</span><span class="pi">:</span> <span class="s">disarmed</span>
        <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
          <span class="na">entity_id</span><span class="pi">:</span> <span class="s">group.all_people</span>
          <span class="na">to</span><span class="pi">:</span> <span class="s">home</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Perform the action</span>
      <span class="na">choose</span><span class="pi">:</span>
        <span class="c1"># Handle the arm action</span>
        <span class="pi">-</span> <span class="na">conditions</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">(wait</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">defined)</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">(wait.trigger</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">not</span><span class="nv"> </span><span class="s">none)</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">(wait.trigger.event.data.action</span><span class="nv"> </span><span class="s">==</span><span class="nv"> </span><span class="s">action_arm)</span><span class="nv"> </span><span class="s">}}"</span>
          <span class="na">sequence</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm_arm_away</span>
              <span class="na">target</span><span class="pi">:</span>
                <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
    <span class="c1"># Clear notifications once an action is taken *or* after it becomes moot</span>
    <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Clear notifications</span>
      <span class="na">service</span><span class="pi">:</span> <span class="s">notify.all_phones</span>
      <span class="na">data</span><span class="pi">:</span>
        <span class="na">message</span><span class="pi">:</span> <span class="s2">"</span><span class="s">clear_notification"</span>
        <span class="na">data</span><span class="pi">:</span>
          <span class="na">tag</span><span class="pi">:</span> <span class="s2">"</span><span class="s">home-alarm-reminder"</span>
</code></pre></div></div>

<p>I hope this helps you get the most out of your security system, namely by being reminded to actual use it!</p>]]></content><author><name>Iwan Setiawan</name></author><category term="Home Automation" /><category term="automation" /><category term="home assistant" /><category term="home automation" /><category term="smart home" /><summary type="html"><![CDATA[After setting up my security system in Home Assistant, a common problem my wife and I ran into was remembering to arm it when we left the house. A security system is only effective when you use it, and we just could not consistently remember to set it.]]></summary></entry><entry><title type="html">Migrate from Home Assistant legacy Z-Wave to Z-Wave JS</title><link href="http://192.168.5.71:4000/home%20automation/2021/02/28/migrate-homeassistant-zwave-to-zwave-js/" rel="alternate" type="text/html" title="Migrate from Home Assistant legacy Z-Wave to Z-Wave JS" /><published>2021-02-28T00:00:00+07:00</published><updated>2021-02-28T00:00:00+07:00</updated><id>http://192.168.5.71:4000/home%20automation/2021/02/28/migrate-homeassistant-zwave-to-zwave-js</id><content type="html" xml:base="http://192.168.5.71:4000/home%20automation/2021/02/28/migrate-homeassistant-zwave-to-zwave-js/"><![CDATA[<p>As of <a href="https://www.home-assistant.io/blog/2021/02/03/release-20212/" target="_blank">version 2021.2</a>, there is a new Z-Wave integration in Home Assistant based on <a href="https://github.com/zwave-js/node-zwave-js" target="_blank">Z-Wave JS</a>, a modern Z-Wave driver built using JS, which is much more accessible for collaboration than the old one using <a href="http://www.openzwave.com/" target="_blank">OpenZWave</a>.</p>

<p>This guide intends to help migration from the legacy Z-Wave integration to Z-Wave JS.</p>

<h2 id="background">Background</h2>

<p>My personal setup uses Home Assistant OS (or HassOS, formerly “HassIO”) on a Raspberry Pi 3B+. This guide will focus on that scenario, so some steps may differ for other installation methods.</p>

<p>Before we begin, we should also understand the difference between an “add-on” and an “integration” in Home Assistant. An “add-on” is something specific to HassOS and those with other installation methods will not have this. An “integration” provides a specific functionality in Home Assistant across all installation types.</p>

<h3 id="architecture">Architecture</h3>

<p>The fundamental architecture of the Z-Wave JS functionality in Home Assistant has two parts.</p>

<p>The first part is the Z-Wave JS server. This is what directly talks to your Z-Wave stick. For HassOS, this part will be provided by an add-on. For other installation methods, you will need to run the server yourself.</p>

<p>The second part is the Z-Wave JS integration in Home Assistant, used for all installation methods. This integration talks to the Z-Wave JS server to send commands to and receive information from your Z-Wave devices.</p>

<p>This split decouples Home Assistant from the Z-Wave controller, providing lots of flexibility in configuration and allowing the Home Assistant server to restart without restarting your Z-Wave network for instance.</p>

<h2 id="preparation">Preparation</h2>

<h3 id="take-a-system-backup">Take a system backup</h3>

<p>First things first, backup your system. For those of you using HassOS, take a full snapshot and once it completes download the snapshot somewhere safe like OneDrive.</p>

<p><img src="/assets/zwave-snapshot.PNG" alt="Taking a snapshot" class="center" /></p>

<h3 id="copy-current-entity-data">Copy current entity data</h3>

<p>After migration, you’ll need to set up all your devices and entities again. To help with this, you should copy the current entity data, specifically which entity id and names you used for each Z-Wave node id.</p>

<p>Go to “Developer Tools” and filter the attributes by “node_id”</p>

<p><img src="/assets/zwave-nodeid-devtools.PNG" alt="Filtering by node_id in Developer Tools" class="center" /></p>

<p>Next you’ll want to copy and and paste into Excel.</p>

<p>An easy way to do this is to:</p>
<ol>
  <li>Click into the entity table</li>
  <li>Press <code class="language-plaintext highlighter-rouge">ctrl+a</code></li>
  <li>Open a blank workbook in Excel</li>
  <li>Press <code class="language-plaintext highlighter-rouge">ctrl+v</code></li>
  <li>Delete rows 2 and 3, which should be an empty row and filter input row</li>
  <li>Select “Data -&gt; Filter”</li>
  <li>Sort the attributes. Note that the sorting is lexicographic, so the order will be 1, 10, 11, … 18, 19, 2, 20, 21)</li>
</ol>

<p>To make sure you got everything, cross check entity count. Mine shows 107 entities in Home Assistant, while Excel shows 108 rows (1 extra for the header).</p>

<p><img src="/assets/zwave-integration-old.PNG" alt="Existing Z-Wave integration" class="center" /></p>

<p><img src="/assets/zwave-nodeid-excel.PNG" alt="Node id backups in Excel" class="center" /></p>

<h3 id="save-z-wave-configuration">Save Z-Wave configuration</h3>

<p>Take note of your device id your Z-Wave stick uses and the network key you use. The latter is especially important or you’ll need to completely set up your Z-Wave network, re-including all devices, from scratch.</p>

<p>If you’ve used yaml to configure this, you can simply comment it out for now so that it’s still available to you later.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">zwave</span><span class="pi">:</span>
  <span class="na">usb_path</span><span class="pi">:</span> <span class="s">/dev/ttyACM0</span>
  <span class="na">network_key</span><span class="pi">:</span> <span class="kt">!secret</span> <span class="s">zwave_network_key</span>
</code></pre></div></div>

<h2 id="migration">Migration</h2>

<h3 id="uninstall-legacy-z-wave-integration">Uninstall legacy Z-Wave integration</h3>

<p>From the integration page, simply delete the Z-Wave integration. As mentioned during preparation, you’ll also want to delete or comment out the <code class="language-plaintext highlighter-rouge">zwave</code> configuration entry if you haven’t already.</p>

<p>Then restart Home Assistant to ensure the legacy Z-Wave inregration is completely gone.</p>

<h3 id="install-z-wave-js-add-on">Install Z-Wave JS add-on</h3>

<p>As mentioned earlier, for installation types besides HassOS, you’ll need to get the Z-Wave JS server running yourself.</p>

<p>For HassOS users, simply go to the Add-on Store and find the <a href="https://github.com/home-assistant/addons/blob/master/zwave_js/DOCS.md" target="_blank">Z-Wave JS add-on</a>.</p>

<p><img src="/assets/zwave-addons-store.PNG" alt="Z-Wave JS in the add-on store" class="center" /></p>

<p>Installation may take a couple minutes, or at least it did for me, so be patient.</p>

<p>After the installation finishes, go to the Configuration for the add-on and add the device USB path and network key you found earlier. Remember to paste the actual network key, not the secret name.</p>

<p>Note that the dropdown did not show my device, so I had to click the 3 dots and “Edit in YAML”.</p>

<p><img src="/assets/zwave-addon-config.PNG" alt="Z-Wave JS Configuration" class="center" /></p>

<p>Pasting in the network key auto-formatted it for me, and my understanding is that both the “0x…” format as well as the “one hex string” formats are supported. Personally, I was using the “0x…” format before, so I just stuck with it.</p>

<p>Save the configuration and start the add-on. I suggest enabling the watchdog as well so that it restarts in case it crashes. You can also choose whether you want to enable auto-updates for the add-on.</p>

<h3 id="add-z-wave-js-integration">Add Z-Wave JS Integration</h3>

<p>Now that the Z-Wave JS server is now up and running, so the next step is to tell Home Assistant itself about it by adding the <a href="https://www.home-assistant.io/integrations/zwave_js/" target="_blank">Z-Wave JS integration</a>.</p>

<p>Go to the integrations page and add the Z-Wave integration. When asked to configur it, ensure the “Use Z-Wave JS Supervisor add-on” is checked if you’re using HassOS and the add-on. Other Home Assistant installation methods will not check that box and instead configure the integration to point to their manually configured Z-Wave JS server.</p>

<p><img src="/assets/zwave-integration-configuring.PNG" alt="Configuring the Z-Wave JS integration" class="center" /></p>

<p>Submit and click through to finish. We’ll configure and rename each device later.</p>

<p>The integration should now be added!</p>

<p><img src="/assets/zwave-integration-done.PNG" alt="Configured Z-Wave JS integration" class="center" /></p>

<p>You may notice that in the image above only 26 of the original 30 devices are shown. I found that the device count is more accurate with the new integration, as with the old integration I had several dead nodes which showed up as devices with no entities in Home Assistant.</p>

<p>You may also notice that battery-powered Z-Wave devices may not initially be properly recognized or populated with entities until they “wake up” and check in with the controller (your Z-Wave stick).</p>

<p><img src="/assets/zwave-device-asleep.PNG" alt="An asleep Z-Wave device" class="center" /></p>

<p>Most devices will wake up on some time interval, or you can look up how to manually wake up a device by reading the manual for that specific device, which usually involves pressing a physical button on the device.</p>

<p>You can check the overall status of the Z-Wave network, including how many nodes are ready, by clicking on “Configure” for the integration.</p>

<p><img src="/assets/zwave-integration-configure.PNG" alt="Configure the Z-Wave JS integration" class="center" /></p>

<h2 id="entity-migration">Entity migration</h2>

<p>Because the integration uses a completely different back-end, entities may be different too. All the old <code class="language-plaintext highlighter-rouge">zwave.*</code> entities are gone, and there are some added but disabled entities. For example all my light switches now have an entity ending in <code class="language-plaintext highlighter-rouge">_basic</code>. Beyond some additions and substrations, some entities will just be different.</p>

<h3 id="configuring-devices-and-entities">Configuring devices and entities</h3>

<p>Unfortunately this part is tedious, especially if you have a large number of devices.</p>

<p>When clicking on a specific device you can see its node id, which you’ll then cross-reference with your entity data pasted into Excel to figure out which device it’s referring to.</p>

<p><img src="/assets/zwave-device-nodeid.PNG" alt="Getting the node id from a device" class="center" /></p>

<p>I would recommend renaming the device first before its entities, because once you rename a device Home Assistant should, for the most part, rename the entities accordingly and sometimes it’ll just happen to match what you had before.</p>

<p><img src="/assets/zwave-device-rename.PNG" alt="Rename entity prompt" class="center" /></p>

<h2 id="issues">Issues</h2>

<p>Now despite the Z-Wave JS integration being the “new thing” and the legacy Z-Wave integration being officially deprecated (but still existing), the new integration definitely has some major flaws and feature gaps. A list of <a href="https://www.home-assistant.io/integrations/zwave_js/#current-limitations" target="_blank">known limitations</a> is even listed on the docs. Some people I’ve seen even go as far to say that the new integration probably should have remained in beta for some time until it fills some of these gaps and has a better migration story.</p>

<h3 id="node-configuration">Node configuration</h3>

<p>One feature gap in particular is that a Node Configuration UI is not yet available. According to the docs:</p>

<blockquote>
  <p>Configuration of Z-Wave nodes and/or configuration with the Home Assistant UI is currently not yet implemented.</p>
</blockquote>

<p>Based on forum posts however, this is only missing because it didn’t make it for the 2021.2 release. That will come in some future release, and supposedly soon.</p>

<h3 id="device-interview-failures">Device interview failures</h3>

<p>One particularly disappointing aspect of the migration for me was that I was never able to get my door/windows sensors to work. I have several <a href="https://products.z-wavealliance.org/products/1574?selectedFrequencyId=2" target="_blank">Aeotec door/window sensor gen 5 (ZW120-A)</a> devices, and even after trying various restarts, pushing the hardware button on the sensors to force wake-ups, and giving it 4+ hours to stabilize, these devices consistently failed to inverview according to the Z-Wave JS logs.</p>

<p><strong>Update Mar 3, 2021:</strong> As of the 2021.3 release, the door/window sensors work. I still had to wake up some of them a couple times, but that may have been because the first round I attempted the wake-ups during the initial surge of interviews, including the ones for wired devices, and the sensors only stay awake for 10 seconds.</p>

<h3 id="performance">Performance</h3>

<p>Z-Wave JS is supposedly “blazing fast”, and others seem to corroborate the statement, however that was not the case for me. For example, I have an automation to turn on my kitchen pendants and under-cabinet lighting when the primary kitchen lights are turned on (via a light switch), and this took several seconds to trigger with the Z-Wave JS solution despite being near-instantaneous with the legacy integration.</p>

<p>I do wonder though whether this is perhaps due to the initial surge of traffic when migrating, including the device interview failures mentioned above, which caused the network as a whole to initially be slow. Maybe if I gave it more time it would have eventually stabilized, although as mentioned above I did give it 4 hours.</p>

<h2 id="final-thoughts">Final thoughts</h2>

<p><strong>Update Mar 3, 2021:</strong> As of the 2021.3 release, the door/window sensors work, so I was successfully able to migrate.</p>

<p>The door/window sensors being unable to successfully interview was a deal breaker for me since these tie into my home’s <a href="/home%20automation/self%20hosting/2020/04/25/setting-up-a-security-system-with-home-assistant/">security system</a>, so I eventually had to go back to the legacy Z-Wave integration via a restore from backup. This is <em>exactly</em> the reason backing up beforehand is so important.</p>

<p>Since this is still very new though, these issues will hopefully be addressed in a future update, perhaps even the 2021.3 release scheduled for this coming week. The Z-Wave JS integration, both on the Z-Wave JS side and the Home Assistant side, seems to have a lot of attention right now and looks like it’ll be actively maintained going forward, so things are likely to get better.</p>

<p>Unfortunately, the question for me is how quickly the new integration can catch up to the legacy one. Personally, I could not wait for fixes and had to roll back, and I suspect many others who attempted migration did the same.</p>

<p>Additionally about a month or so ago, before Z-Wave JS was announced, I attempted to migrate to the OpenZWave beta integration. This was at the time supposedly the new thing, but is now basically abandoned. I also had issues with it (the same door/window sensors in fact…), so even then had to roll back to the legacy integration.</p>

<p>Assuming others are having similar experiences as me, I can’t blame anyone for feeling burned by the Home Assistant team and being pessimistic about the new Z-Wave JS integration. There’s certainly some trust lost in how Z-Wave has been handled, and the Home Assistant devs will need to work hard to build back some of that trust with users. I worry some users may even jump to another platform since trust is just such an important thing when it comes to people’s home.</p>

<p>Personally, I am hopeful about the future of the integration and have faith that it will (eventually) be great. I will certainly be trying to migrate again after the 2021.3 release, and I’m optimistic that it will have addressed the larger issues surrounding the integration.</p>]]></content><author><name>Iwan Setiawan</name></author><category term="Home Automation" /><category term="automation" /><category term="home assistant" /><category term="home automation" /><category term="smart home" /><category term="z-wave" /><summary type="html"><![CDATA[As of version 2021.2, there is a new Z-Wave integration in Home Assistant based on Z-Wave JS, a modern Z-Wave driver built using JS, which is much more accessible for collaboration than the old one using OpenZWave.]]></summary></entry><entry><title type="html">Creating a blog using GitHub Pages</title><link href="http://192.168.5.71:4000/blog/jekyll/2021/01/18/creating-a-blog-using-github-pages/" rel="alternate" type="text/html" title="Creating a blog using GitHub Pages" /><published>2021-01-18T00:00:00+07:00</published><updated>2021-01-18T00:00:00+07:00</updated><id>http://192.168.5.71:4000/blog/jekyll/2021/01/18/creating-a-blog-using-github-pages</id><content type="html" xml:base="http://192.168.5.71:4000/blog/jekyll/2021/01/18/creating-a-blog-using-github-pages/"><![CDATA[<p>Many software engineers have blogs, whether it’s to write about a particularly sticky problem they ran into, express their opinion about a given technology, evangelize their own projects, or to create a tutorial for a common task. This article falls into the latter category, as I felt like there are so many options with varying levels of barrier to entry, but there’s a really simple solution.</p>

<p>This blog was originally hosted on a <a href="https://pages.github.com/" target="_blank">WordPress</a> site which shared an <a href="https://azure.microsoft.com/en-us/services/app-service/" target="_blank">Azure App Service</a> with some other websites I have and it’s own MySql database. Now not only did that cost money (or would have if it wasn’t sharing existing resources), but it was just way overkill for what I was doing, and even for all that it was just plain slow. Furthermore, and this is possibly just personal preference, I really just wanted to write <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank">Markdown</a> and not have to deal with a fancy text editor or raw HTML. WordPress may be OK for people who don’t want to deal with any sort of programming or configuration but I, and I suspect most programmers, are more comfortable working with some sort of markup language like Markdown.</p>

<p>After looking around, I ended up landing on <a href="https://pages.github.com/" target="_blank">GitHub Pages</a>. In essence, GitHub Pages allows you to host static web content for free. They also provide integration with <a href="https://jekyllrb.com/" target="_blank">Jekyll</a>, a static content generator, which gives a little bit more flexibility. For those not familiar with static content generation, it’s basically just a tool which transforms some content and configuration into a full website. This allows you to create templates, shared includes, and variables to avoid having to write and update full HTML pages. GitHub Pages is also really easy to set up as it’s just a special GitHub repo, and it’s blazingly fast since your content is extremely cacheable so is generally served from CDN.</p>

<p>Assuming I’ve sold you on GitHub Pages, let’s see how easy it is to set up. There is documentation for both GitHub pages and Jekyll, but in my opinion the docs can be a bit hard to navigate since it’s split across the two sites and many of Jekyll’s features are not available on GitHub pages, which is unclear from the docs. This guide intends to explain the basics, as well as some of the more advanced topics I found useful. You can also see <a href="https://github.com/dfederm/dfederm.github.io" target="_blank">this blog’s repo</a> for reference when configuring your own blog.</p>

<h2 id="repository-creation">Repository Creation</h2>

<p>GitHub Pages allows a user, organization, or even a project to have its own site. For user sites, it’s in is own repo. The <a href="https://pages.github.com/" target="_blank">GitHub Pages</a> website gives step-by-step instructions, but really all you have to do is create a repo named <code class="language-plaintext highlighter-rouge">&lt;username&gt;.github.io</code>.</p>

<p>After the repo is created, clone it locally and clear out the initial boilerplate GitHub gives you.</p>

<h2 id="setting-up-wsl">Setting up WSL</h2>

<p>(Users not using Windows can skip this section)</p>

<p>Unfortunately, Windows is not officially supported by Jekyll. They provide some <a href="https://jekyllrb.com/docs/installation/windows/" target="_blank">workarounds</a>, but personally it seemed more trouble than it’s worth. Because of this, I recommend using the <a href="https://docs.microsoft.com/en-us/windows/wsl/" target="_blank">Windows Subsystem for Linux</a>, or WSL.</p>

<p>First, ensure CPU Virtualization is enabled in the BIOS. The process for enabling it varies by manufacturer, but you can check whether it’s enabled in the Task Manager under the performance tab.</p>

<p><img src="/assets/cpu-virtualization-enabled.PNG" alt="The Task Manager showing the Virtualization setting" class="center" /></p>

<p>Next, you’ll need to actually install WSL 2. Follow the <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank">official instructions</a> for a step-by-step guide. Personally, I ended up using the Ubuntu 20.04 distro, but you should be able to use whichever you prefer.</p>

<h2 id="installing-jekyll">Installing Jekyll</h2>

<p>Jekyll requires <a href="https://www.ruby-lang.org/en/" target="_blank">Ruby</a>, so you’ll first need to install it. On Ubuntu, just run:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install Ruby</span>
<span class="nb">sudo </span>apt-get <span class="nb">install </span>ruby-full build-essential zlib1g-dev

<span class="c"># Ensure RubyGems packages are installed under the user account instead of root.</span>
<span class="nb">echo</span> <span class="s1">'# Install Ruby Gems to ~/gems'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">echo</span> <span class="s1">'export GEM_HOME="$HOME/gems"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">echo</span> <span class="s1">'export PATH="$HOME/gems/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">source</span> ~/.bashrc

<span class="c"># Install Jekyll and Bundler:</span>
gem <span class="nb">install </span>jekyll bundler
</code></pre></div></div>

<h2 id="site-creation">Site Creation</h2>

<p>From your Linux shell, navigate to your GitHub repository created earlier and run:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new <span class="nb">.</span>
</code></pre></div></div>

<p>Note that for Windows users, your Windows drives like C: are mounted in WSL, so you can get to a path like <code class="language-plaintext highlighter-rouge">C:\Users\David\Code\dfederm.github.io</code> via <code class="language-plaintext highlighter-rouge">/mnt/c/Users/David/Code/dfederm.github.io</code>.</p>

<p>The new Jekyll template is a good starting point, but you’ll want to make a few changes to work properly with GitHub Pages.</p>

<p>From here on you can edit the files in your favorite editor, eg. <a href="https://code.visualstudio.com/" target="_blank">Visual Studio Code</a>. You only need to use your Linux shell to run ruby, bundle, and Jekyll commands.</p>

<p>First, replace the <code class="language-plaintext highlighter-rouge">Gemfile</code> contents with the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span> <span class="s2">"https://rubygems.org"</span>

<span class="c1"># To update to the latest github dependencies run: `bundle update`</span>
<span class="c1"># To list current versions: `bundle exec github-pages versions`</span>
<span class="c1"># Check github versions: https://pages.github.com/versions/</span>
<span class="n">gem</span> <span class="s2">"github-pages"</span><span class="p">,</span> <span class="ss">group: :jekyll_plugins</span>

<span class="n">group</span> <span class="ss">:jekyll_plugins</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'jekyll-feed'</span>
  <span class="n">gem</span> <span class="s1">'jekyll-paginate'</span>
  <span class="n">gem</span> <span class="s1">'jekyll-seo-tag'</span>
  <span class="n">gem</span> <span class="s1">'jekyll-sitemap'</span>
<span class="k">end</span>

<span class="c1"># Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem</span>
<span class="c1"># and associated library.</span>
<span class="n">install_if</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="no">RUBY_PLATFORM</span> <span class="o">=~</span> <span class="sr">%r!mingw|mswin|java!</span> <span class="p">}</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s2">"tzinfo"</span><span class="p">,</span> <span class="s2">"~&gt; 1.2"</span>
  <span class="n">gem</span> <span class="s2">"tzinfo-data"</span>
<span class="k">end</span>

<span class="c1"># Performance-booster for watching directories on Windows</span>
<span class="n">gem</span> <span class="s2">"wdm"</span><span class="p">,</span> <span class="s2">"~&gt; 0.1.1"</span><span class="p">,</span> <span class="ss">:install_if</span> <span class="o">=&gt;</span> <span class="no">Gem</span><span class="p">.</span><span class="nf">win_platform?</span>
</code></pre></div></div>

<p>You’ll notice that the <a href="https://rubygems.org/gems/github-pages/versions/209" target="_blank"><code class="language-plaintext highlighter-rouge">github-pages</code> gem</a> is there, which ensures what you’re using locally matches what GitHub Pages uses. Notably GitHub pages does not support arbitrary Jekyll plugins, so you generally shouldn’t deviate from this Gemfile too much. The list of Jekyll plugins and other Ruby Gems GitHub pages supports can be found <a href="https://pages.github.com/versions/" target="_blank">on their website</a>.</p>

<p>After updating the <code class="language-plaintext highlighter-rouge">Gemfile</code>, you’ll want to <code class="language-plaintext highlighter-rouge">bundle update</code> to install everything.</p>

<p>To build the site and serve it locally, run:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve <span class="nt">--drafts</span> <span class="nt">--livereload</span>
</code></pre></div></div>

<p>For those running Windows, I recommend adding <code class="language-plaintext highlighter-rouge">--force_polling</code>. Otherwise, saving your content sometimes does not auto-regenerate the site.</p>

<p>Your site should now be running at <code class="language-plaintext highlighter-rouge">http://localhost:4000</code>!</p>

<p>For the curious, you can see the entire generated website under the <code class="language-plaintext highlighter-rouge">_site</code> folder.</p>

<p>Once you commit and push your changes, GitHub will automatically build your website and deploy it within minutes. Your website will be at <code class="language-plaintext highlighter-rouge">&lt;username&gt;.github.io</code>. You’re up and running!</p>

<p>Jekyll is quite powerful and the <a href="https://jekyllrb.com/docs/" target="_blank">docs</a> go into details about every feature. Below I’ll describe the major ones which will get you up and running.</p>

<h2 id="configuring-the-site">Configuring the site</h2>

<p><code class="language-plaintext highlighter-rouge">_config.yml</code> is the primary configuration for the site as a whole. It describes how to build the site, site-wide configuration, and custom site-wide variables you may want to define.</p>

<p>The new site template hits a few of the major configurations, however I’d recommend adding a few more:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Site settings</span>
<span class="na">permalink</span><span class="pi">:</span> <span class="s">/:title/</span>
<span class="na">markdown</span><span class="pi">:</span> <span class="s">kramdown</span>
<span class="na">paginate</span><span class="pi">:</span> <span class="m">5</span>
<span class="na">paginate_path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/:num/"</span>
<span class="na">date_format</span><span class="pi">:</span> <span class="s2">"</span><span class="s">%b</span><span class="nv"> </span><span class="s">%-d,</span><span class="nv"> </span><span class="s">%Y"</span>
</code></pre></div></div>

<p>To describe these settings:</p>
<ul>
  <li><a href="https://jekyllrb.com/docs/permalinks/" target="_blank"><code class="language-plaintext highlighter-rouge">permalink</code></a> is the url format for your permalinks. I like the url to just be the post title.</li>
  <li><code class="language-plaintext highlighter-rouge">markdown</code> is the markdown formatter.</li>
  <li><code class="language-plaintext highlighter-rouge">paginate</code> is the number of posts per page if using pagination. (requires the <a href="https://jekyllrb.com/docs/pagination/" target="_blank"><code class="language-plaintext highlighter-rouge">jekyll-paginate</code></a> plugin)</li>
  <li><code class="language-plaintext highlighter-rouge">paginate_path</code> is the url format for pages. I like a simple <code class="language-plaintext highlighter-rouge">/1</code>, <code class="language-plaintext highlighter-rouge">/2</code>, etc. (requires the <a href="https://jekyllrb.com/docs/pagination/" target="_blank"><code class="language-plaintext highlighter-rouge">jekyll-paginate</code></a> plugin)</li>
  <li><code class="language-plaintext highlighter-rouge">date_format</code> is the default date format the site uses.</li>
</ul>

<p>GitHub Pages also forces <a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages-and-jekyll#configuring-jekyll-in-your-github-pages-site" target="_blank">some configuration</a> which you cannot change. Be sure to avoid changing these or you’ll only see the behavior locally and they’ll be lost when deployed.</p>

<p>This is also where you configure your plugins, for example:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">jekyll-feed</span>
  <span class="pi">-</span> <span class="s">jekyll-paginate</span>
  <span class="pi">-</span> <span class="s">jekyll-seo-tag</span>
  <span class="pi">-</span> <span class="s">jekyll-sitemap</span>
</code></pre></div></div>

<p>To describe these plugins:</p>
<ul>
  <li><a href="https://github.com/jekyll/jekyll-feed" target="_blank"><code class="language-plaintext highlighter-rouge">jekyll-feed</code></a> creates an Atom feed for your site at <code class="language-plaintext highlighter-rouge">/feed.xml</code>.</li>
  <li><a href="https://jekyllrb.com/docs/pagination/" target="_blank"><code class="language-plaintext highlighter-rouge">jekyll-paginate</code></a> enables pagination</li>
  <li><a href="https://github.com/jekyll/jekyll-seo-tag" target="_blank"><code class="language-plaintext highlighter-rouge">jekyll-seo-tag</code></a> adds search engine metadata to the site.</li>
  <li><a href="https://github.com/jekyll/jekyll-sitemap" target="_blank"><code class="language-plaintext highlighter-rouge">jekyll-sitemap</code></a> creates a site map for your site at <code class="language-plaintext highlighter-rouge">/sitemap.xml</code>.</li>
</ul>

<p>You can also add any other custom various in this file as well. Simply add them to the <code class="language-plaintext highlighter-rouge">_config.yml</code> file, for example:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">google_analytics</span><span class="pi">:</span> <span class="s">&lt;your-ga-id&gt;</span>
</code></pre></div></div>

<p>These custom variables can be used in your content like <code class="language-plaintext highlighter-rouge">{{ site.google_analytics }}</code>.</p>

<h2 id="pages">Pages</h2>

<p>These are for standalone content for your site, like the home page, about page, contact page, etc. These can be either <code class="language-plaintext highlighter-rouge">.html</code> or <code class="language-plaintext highlighter-rouge">.md</code> files, based on whichever is better for writing your content.</p>

<p>By default, the url for pages follows the folder structure you use, so <code class="language-plaintext highlighter-rouge">documentation\doc1.md</code> would become <code class="language-plaintext highlighter-rouge">/documentation/doc1.html</code>, but this can be overridden.</p>

<h2 id="front-matter-layouts-and-includes">Front Matter, Layouts, and Includes</h2>

<p>Jekyll is a templating engine, which helps avoid duplication and enable you to express what you want to happen rather than having to type it up by hand.</p>

<p><a href="https://jekyllrb.com/docs/front-matter/" target="_blank">“Front Matter”</a> is a term for a file that contains a YAML block at the top of the file and is processed by Jekyll. The YAML must be set between triple-dashed lines and is where you define the file-specific variables. For example, you can specify the layout for Jekyll to use, the title, and custom variables to use within the page.</p>

<p>An example from my About page:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">page</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">About</span>
<span class="na">order</span><span class="pi">:</span> <span class="m">2</span>
<span class="nn">---</span>
</code></pre></div></div>

<p><a href="https://jekyllrb.com/docs/layouts/" target="_blank">Layouts</a> are basically the template for the content. There are some default layouts, but you’ll likely want to customize your own. Layouts reside under the <code class="language-plaintext highlighter-rouge">_layouts</code> folder and the layout name is just the file name without extension. In the example above for my about page, I have the layout at <code class="language-plaintext highlighter-rouge">_layouts\page.html</code>.</p>

<p>A layout may inherit other layouts (and in fact, my <code class="language-plaintext highlighter-rouge">page</code> layout inherits my <code class="language-plaintext highlighter-rouge">default</code> layout), and specifies where to put the file’s content with <code class="language-plaintext highlighter-rouge">{{ content }}</code>.</p>

<p>Finally, <a href="https://jekyllrb.com/docs/includes/" target="_blank">includes</a> can be used to insert files into the current file without having to repeat it. It can also help organize your content and layouts by extracting logical blocks into separate files.</p>

<p>To put it all together, for my site I have something like the following files (simplified for brevity, and omitted some files):</p>

<p><strong>about.md:</strong></p>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">page</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">About</span>
<span class="na">order</span><span class="pi">:</span> <span class="m">2</span>
<span class="nn">---</span>

<span class="gu">## Subtitle 1</span>
Some Content

<span class="gu">## Subtitle 2</span>
Some Content
</code></pre></div></div>

<p><strong>_layouts\page.html:</strong></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: default
---
<span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">"post-header"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"post-title"</span><span class="nt">&gt;</span>{{ page.title | escape }}<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;/header&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"post-content"</span><span class="nt">&gt;</span>
        {{ content }}
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/article&gt;</span>
</code></pre></div></div>

<p><strong>_layouts\default.html:</strong></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
{%- include head.html -%}
<span class="nt">&lt;body&gt;</span>
    {%- include header.html -%}
    <span class="nt">&lt;main</span> <span class="na">class=</span><span class="s">"page-content"</span>
          <span class="na">aria-label=</span><span class="s">"Content"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"wrapper"</span><span class="nt">&gt;</span>
            {{ content }}
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/main&gt;</span>
    {%- include footer.html -%}
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><strong>_includes\head.html:</strong></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;head&gt;</span>
      <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span><span class="nt">&gt;</span>
      {%- include favicons.html -%}
      {%- seo -%}
      <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"{{ "</span><span class="err">/</span><span class="na">assets</span><span class="err">/</span><span class="na">css</span><span class="err">/</span><span class="na">style.css</span><span class="err">"</span> <span class="err">|</span> <span class="na">relative_url</span> <span class="err">}}"</span><span class="nt">&gt;</span>
      {%- feed_meta -%}
      {%- if jekyll.environment == 'production' and site.google_analytics -%}
      {%- include google-analytics.html -%}
      {%- endif -%}
<span class="nt">&lt;/head&gt;</span>
</code></pre></div></div>

<p><strong>_includes\header.html:</strong></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">async</span> <span class="na">src=</span><span class="s">"https://www.googletagmanager.com/gtag/js?id={{ site.google_analytics }}"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">dataLayer</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">dataLayer</span> <span class="o">||</span> <span class="p">[];</span>
    <span class="kd">function</span> <span class="nx">gtag</span><span class="p">()</span> <span class="p">{</span> <span class="nx">dataLayer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span> <span class="p">}</span>
    <span class="nx">gtag</span><span class="p">(</span><span class="dl">'</span><span class="s1">js</span><span class="dl">'</span><span class="p">,</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>

    <span class="nx">gtag</span><span class="p">(</span><span class="dl">'</span><span class="s1">config</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">{{ site.google_analytics }}</span><span class="dl">'</span><span class="p">);</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<h2 id="posts">Posts</h2>

<p><a href="https://jekyllrb.com/docs/posts/" target="_blank">Posts</a> are what blogs are all about. Posts go in the <code class="language-plaintext highlighter-rouge">_posts</code> folder and should be named <code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.md</code>, so for example this post is in <code class="language-plaintext highlighter-rouge">_posts/2021-01-18-creating-a-blog-using-github-pages.md</code>.</p>

<p>Posts also are required to have front matter, which you’ll typically use to specify the layout and title of the post.</p>

<p>An example post file is as simple as:</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">My first post!</span>
<span class="na">categories</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">blogging</span><span class="pi">]</span>
<span class="nn">---</span>

<span class="gu">## Hello!</span>
My first blog post
</code></pre></div></div>

<p>You can also create drafts when you’re not read to post something quite yet. Just put the file in the <code class="language-plaintext highlighter-rouge">_drafts</code> folder and don’t have a date in the file name. Drafts are only included in the site when using the <code class="language-plaintext highlighter-rouge">--drafts</code> command-line parameter, so they won’t be included on your production site. This allows you to push your unfinished changes instead of having to create topic branches in git like you would with code.</p>

<h2 id="static-files-assets-and-themes">Static files, Assets and Themes</h2>

<p>Static files like images are pretty simple. You can just reference them as a relative url using standard markdown. Personally, I used the “assets” folder for static content, although “assets” mean something slight different in Jekyll.</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">My first post!</span>
<span class="na">categories</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">blogging</span><span class="pi">]</span>
<span class="nn">---</span>

<span class="gu">## Image example</span>
<span class="p">![</span><span class="nv">Image alt text</span><span class="p">](</span><span class="sx">/assets/some-image.png</span><span class="p">)</span>
</code></pre></div></div>

<p>“Assets” in Jekyll refers to the built-in support for <a href="https://sass-lang.com/" target="_blank">Sass</a>. Put your main SCSS or Sass files where you want them, like <code class="language-plaintext highlighter-rouge">assets/css/style.scss</code>, and be sure to make them proper “front matter”, with the two lines of triple dashes. The <code class="language-plaintext highlighter-rouge">_sass</code> directory is the base directory for your imported SCSS/Sass files.</p>

<p>Personally, I recommend your <code class="language-plaintext highlighter-rouge">assets/css/style.scss</code> file simply importing a root-level SCSS file, and having all your actual styles under the <code class="language-plaintext highlighter-rouge">_sass</code> directory.</p>

<p>For example:</p>

<p><strong>assets/css/style.scss:</strong></p>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">---</span>
<span class="nn">#</span> <span class="nt">Only</span> <span class="nt">the</span> <span class="nt">main</span> <span class="nt">Sass</span> <span class="nt">file</span> <span class="nt">needs</span> <span class="nt">front</span> <span class="nt">matter</span> <span class="o">(</span><span class="nt">the</span> <span class="nt">dashes</span> <span class="nt">are</span> <span class="nt">enough</span><span class="o">)</span>
<span class="nt">---</span>

<span class="o">@</span><span class="nt">import</span> <span class="s2">"site"</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>_sass\site.scss:</strong></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@charset</span> <span class="s2">"utf-8"</span><span class="p">;</span>

<span class="cm">/* All your actual variables and styles */</span>
</code></pre></div></div>

<p><strong>_includes\head.html</strong> (or wherever your <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> tag is):</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/assets/css/style.css"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>Jekyll also has support for <a href="https://jekyllrb.com/docs/themes/" target="_blank">themes</a>, however, GitHub pages only supports <a href="https://pages.github.com/themes/" target="_blank">a small set of them</a>. A theme may help you get off the ground quickly, but I recommend just customizing to make your blog your own. Personally, I started with the minima theme as a base (ie. I just copied the scss files), and then just customized those files as desired.</p>

<h2 id="custom-domain">Custom domain</h2>
<p>GitHub pages supports <a href="https://docs.github.com/en/github/working-with-github-pages/about-custom-domains-and-github-pages" target="_blank">custom domains</a>, for example this blog is hosted on <a href="https://dfederm.com/" target="_blank"><code class="language-plaintext highlighter-rouge">dfederm.com</code></a> instead of <code class="language-plaintext highlighter-rouge">dfederm.github.io</code>.</p>

<p>GitHub pages supports both apex domains (eg mysite.com) and subdomains (eg blog.mysite.com). They’re slightly different, but both are pretty easy to set up.</p>

<p>In either case, the first step is to configure the GitHub side. Navigate to the repository settings and under the “Custom domain” option provide your custom domain. This will commit a <code class="language-plaintext highlighter-rouge">CNAME</code> file at the root of the repo pointing to the custom domain. It’s also strongly recommended to check the “Enforce HTTPS button” setting just below.</p>

<p>Next, you’ll need to configure things with your DNS provider. The specific details for making this configuration varies by DNS provider, but is generally straightforward.</p>

<p>If you’re configuring an apex domain, you’ll need to create an <code class="language-plaintext highlighter-rouge">A</code> record to the following IP addresses:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
</code></pre></div></div>

<p>Note that if you’re configuring an apex domain, it’s also recommended to configure the <code class="language-plaintext highlighter-rouge">www</code> subdomain.</p>

<p>If you’re configuring a subdomain (<code class="language-plaintext highlighter-rouge">www</code> or otherwise), you’ll need to create a <code class="language-plaintext highlighter-rouge">CNAME</code> record for the subdomain to the alias <code class="language-plaintext highlighter-rouge">&lt;username&gt;.github.io</code>.</p>

<p>Note that DNS changes may take up to 24 hours to propagate.</p>

<h2 id="categories">Categories</h2>
<p>As you add more content over time, you will likely want a categories page as a quick way for users to find related content.</p>

<p>This can be implemented by a Page using some <a href="https://jekyllrb.com/docs/variables/#site-variables" target="_blank">site variables</a>, specifically <code class="language-plaintext highlighter-rouge">site.categories</code>.</p>

<p>This <code class="language-plaintext highlighter-rouge">site.categories</code> variable contains a list of all the categories your posts have. A post can list its categories in the front matter section:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Some post</span>
<span class="na">categories</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">Some Category</span><span class="pi">,</span> <span class="nv">Some Other Category</span><span class="pi">]</span>
<span class="na">comments</span><span class="pi">:</span> <span class="no">true</span>
<span class="nn">---</span>

<span class="s">...Post content...</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">site.categories</code> variable’s contents are a little awkward in my opinion, as each item in the list is itself a list containing exactly 2 elements: the category name and the posts in the category. It’s unclear to me why it’s not a more structured object.</p>

<p>Here’s an example of what my categories page <code class="language-plaintext highlighter-rouge">categories.html</code> looks like, which lists every category as headings in alphabetical order and a link to each post within that category in a bulleted list under it:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: page
title: Categories
order: 1
---

{%- assign categories = site.categories | sort -%}
{%- for category in categories -%}

{%- assign categoryName = category[0] -%}
{%- assign categoryNumPosts = category[1] | size -%}
<span class="nt">&lt;h2</span> <span class="na">id=</span><span class="s">"{{categoryName | uri_escape | downcase }}"</span><span class="nt">&gt;</span>{{ categoryName }} ({{ categoryNumPosts }})<span class="nt">&lt;/h2&gt;</span>

<span class="nt">&lt;ul&gt;</span>
    {% assign sorted_posts = category[1] | reversed %}
    {% for post in sorted_posts %}
    <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ post.url }}"</span><span class="nt">&gt;&lt;/a&gt;</span> -
        <span class="nt">&lt;time</span> <span class="na">datetime=</span><span class="s">"{{ post.date | date_to_xmlschema }}"</span>
              <span class="na">itemprop=</span><span class="s">"datePublished"</span><span class="nt">&gt;</span>{{ post.date | date: "%b %-d, %Y" }}<span class="nt">&lt;/time&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    {% endfor %}
<span class="nt">&lt;/ul&gt;</span>

{%- endfor -%}
</code></pre></div></div>

<p>As content grows, it may even eventually be a good idea to add an index at the top of the categories page to quickly anchor to each category.</p>]]></content><author><name>Iwan Setiawan</name></author><category term="Blog" /><category term="Jekyll" /><summary type="html"><![CDATA[Many software engineers have blogs, whether it’s to write about a particularly sticky problem they ran into, express their opinion about a given technology, evangelize their own projects, or to create a tutorial for a common task. This article falls into the latter category, as I felt like there are so many options with varying levels of barrier to entry, but there’s a really simple solution.]]></summary></entry><entry><title type="html">Debugging MSBuild</title><link href="http://192.168.5.71:4000/.net/msbuild/2020/12/13/debugging-msbuild/" rel="alternate" type="text/html" title="Debugging MSBuild" /><published>2020-12-13T00:00:00+07:00</published><updated>2020-12-13T00:00:00+07:00</updated><id>http://192.168.5.71:4000/.net/msbuild/2020/12/13/debugging-msbuild</id><content type="html" xml:base="http://192.168.5.71:4000/.net/msbuild/2020/12/13/debugging-msbuild/"><![CDATA[<p>At work I live primarily in the build space, specifically <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild" target="_blank">MSBuild</a>-based environments, and a common trend I’ve noticed is that many developers struggle with MSBuild. The reason for this isn’t typically because the build space is “too hard”, or at least not much harder than any other kind of programming, but instead because the MSBuild syntax is effectively its own language and debugging execution of that language is not something most developers know how to do. This article attempts to provide various techniques for debugging MSBuild execution.</p>

<p>First, it’s important to understand the basics of MSBuild syntax. The official <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-concepts" target="_blank">MSBuild documentation</a> is quite detailed in this regard, so for the rest of this article I’ll assume a basic understanding of MSBuild properties, items, and targets.</p>

<h2 id="the-log-viewer">The log viewer</h2>

<p>MSBuild unfortunately does not have a full-blown debugging experience, in terms of breakpoints and stepping through the MSBuild syntax line-by-line, but instead one has to primarily rely on logging. However, MSBuild has quite verbose logging, as anyone who has enabled diagnostic logging can attest to. Diagnostic logging has much of the required information for understanding what’s happening, but it can be near-impossible due to its incredible size and unstructured nature.</p>

<p>Enter the <a href="https://msbuildlog.com/" target="_blank">MSBuild Structured Log Viewer</a>. Binary logging is built-into MSBuild itself, but as it’s a binary file you need a special viewer to properly consume it.</p>

<p>The log viewer has a few options on the start page, but the only one with major functionality implications is a <a href="https://github.com/KirillOsenkov/MSBuildStructuredLog/commit/113e3e10805fb3ec917a5b41dee929135303c14f" target="_blank">recently added option</a> to parent all targets directly under project instead of attempting (sometimes badly) to create a tree from the target graph. It now <a href="https://github.com/KirillOsenkov/MSBuildStructuredLog/commit/754a57e07f83fda9cb550cf005e5c5924303bb06" target="_blank">defaults to being enabled</a>, so I also recommend this setting and will be using it throughout this article.</p>

<h2 id="producing-binary-logs">Producing binary logs</h2>

<p>As the binary logger is build-into MSBuild, enabling it is as simple as using command-line option <code class="language-plaintext highlighter-rouge">-binaryLogger</code>, or <code class="language-plaintext highlighter-rouge">-bl</code> for short. As with other MSBuild command-line options, it works with the <code class="language-plaintext highlighter-rouge">dotnet</code> CLI.</p>

<p>When a specific file is not provided, it defaults to dropping an <code class="language-plaintext highlighter-rouge">msbuild.binlog</code> in the current directory.</p>

<p>Examples:</p>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">REM Produce msbuild.binlog</span>
<span class="kd">msbuild</span> <span class="na">-bl
</span><span class="kd">dotnet</span> <span class="na">-bl

</span><span class="c">REM In a CI environment, you probably want to put the log somewhere specific</span>
<span class="kd">msbuild</span> <span class="na">-BinaryLogger</span><span class="nl">:path</span>\to\logs\msbuild.binlog
</code></pre></div></div>

<h2 id="basic-debugging">Basic debugging</h2>

<p>To have an example to look at, I’ll be using a trivial project structure which can be created with the following commands:</p>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">dotnet</span> <span class="kd">new</span> <span class="kd">console</span> <span class="na">-o </span><span class="kd">App</span>
<span class="kd">dotnet</span> <span class="kd">new</span> <span class="kd">classlib</span> <span class="na">-o </span><span class="kd">Lib1</span>
<span class="kd">dotnet</span> <span class="kd">new</span> <span class="kd">classlib</span> <span class="na">-o </span><span class="kd">Lib2</span>
<span class="kd">dotnet</span> <span class="kd">add</span> <span class="kd">App</span>\App.csproj <span class="kd">reference</span> <span class="kd">Lib1</span>\Lib1.csproj <span class="kd">Lib2</span>\Lib2.csproj
</code></pre></div></div>

<p>After running <code class="language-plaintext highlighter-rouge">dotnet build App /bl</code> and opening the resulting <code class="language-plaintext highlighter-rouge">msbuild.binlog</code>, you should see something like this:</p>

<p><img src="/assets/structured-log-viewer-collapsed.PNG" alt="collapsed structured log example" class="center" /></p>

<p>There is quite a bit of top-level information, including:</p>
<ul>
  <li>The full command-line. Note that <code class="language-plaintext highlighter-rouge">dotnet build</code> gets translated to running the .NET Core flavor of MSBuild with specific options.</li>
  <li>Environment variables. Recall that environment various get hoisted as MSBuild properties if the properties are not explicitly assigned, so this information can be very helpful.</li>
  <li>All project evaluations. Note that MSBuild will evaluate a project multiple times if the global properties differ. Also note that evaluation is basically the initial state of the project, before any targets have executed. So this can be helpful for debugging</li>
  <li>The root(s) of the target execution. In this case there is both the Restore target and the default targets. This is because <code class="language-plaintext highlighter-rouge">dotnet build</code> translates to <code class="language-plaintext highlighter-rouge">msbuild -restore</code> which does an implicit restore before building. You can disable this by providing <code class="language-plaintext highlighter-rouge">--no-restore</code> to <code class="language-plaintext highlighter-rouge">dotnet</code>.</li>
</ul>

<p>There is a search feature which can help if you know the property, item, target, or file name you’re interested in. In addition to just text searching, you can also filter by kind of thing, for example just searching properties.</p>

<p>For a given target, there is another target listed to the right which explains why the target executed. If you hover, you can see specifically whether it was because of <code class="language-plaintext highlighter-rouge">BeforeTargets</code>, <code class="language-plaintext highlighter-rouge">AfterTargets</code>, or <code class="language-plaintext highlighter-rouge">DependsOnTargets</code>. You can also tell whether the target actually executed based on its condition by whether it’s dimmed.</p>

<p>A non-obvious trick is that if you double-click on a project or target, it will open the file it’s contained in. This can help give you a glance into the logic of the target. You can take this a bit further and right-click on a project and select “Preprocess”, which will give you the completely flattened XML for the entire project, exactly like the <code class="language-plaintext highlighter-rouge">-pp</code> MSBuild switch. The preprocess can be extremely helpful in understanding the build logic.</p>

<p>As a general guide, you will mostly rely on the target execution log for determine what happened, while the preprocess will help answer why it happened. For example, the target execution log will show that a property was set to some specific value, while the preprocess will show the logic of why it was set to that value.</p>

<p>An interesting detail about the implicit restore you can observe is that there is a global property <code class="language-plaintext highlighter-rouge">MSBuildRestoreSessionId</code> set. This is because during the restore, packages may not have been downloaded yet and thus any build logic which should be imported from packages may be missing. Setting a global property to an effectively random value forces the restore to be evaluated and execute in a completely separate context from the default targets. Then after restore when the default targets execute, it requires a new evaluation and imports from packages will actually be available. I’ll go into more details about how restore and how <code class="language-plaintext highlighter-rouge">PackageReference</code> works in a future post.</p>

<h2 id="debugging-example-content-item-copying">Debugging example: <code class="language-plaintext highlighter-rouge">@(Content)</code> item copying</h2>

<p>In my opinion, the best way to understand how to debug MSBuild is to actually dive into the logs and see if we can use them to answer some questions. In this example, we’ll dig into the logs to understand how content files in referenced projects propagate to a project’s output folder.</p>

<p>First, create some dummy content files:</p>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="kd">Foo</span> <span class="o">&gt;</span> <span class="kd">Lib1</span>\Foo.txt
<span class="nb">echo</span> <span class="kd">Bar</span> <span class="o">&gt;</span> <span class="kd">Lib2</span>\Bar.txt
<span class="nb">echo</span> <span class="kd">Baz</span> <span class="o">&gt;</span> <span class="kd">App</span>\Baz.txt
</code></pre></div></div>

<p>Next, configure the content to be copied to the output directories.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">&lt;!-- In Lib1\Lib1.csproj --&gt;</span>
  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;Content</span> <span class="na">Include=</span><span class="s">"Foo.txt"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;CopyToOutputDirectory&gt;</span>PreserveNewest<span class="nt">&lt;/CopyToOutputDirectory&gt;</span>
    <span class="nt">&lt;/Content&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>

  <span class="c">&lt;!-- In Lib2\Lib2.csproj --&gt;</span>
  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;Content</span> <span class="na">Include=</span><span class="s">"Bar.txt"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;CopyToOutputDirectory&gt;</span>PreserveNewest<span class="nt">&lt;/CopyToOutputDirectory&gt;</span>
    <span class="nt">&lt;/Content&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>

  <span class="c">&lt;!-- In App\App.csproj --&gt;</span>
  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;Content</span> <span class="na">Include=</span><span class="s">"Baz.txt"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;CopyToOutputDirectory&gt;</span>PreserveNewest<span class="nt">&lt;/CopyToOutputDirectory&gt;</span>
    <span class="nt">&lt;/Content&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>
</code></pre></div></div>

<p>Now if we build using <code class="language-plaintext highlighter-rouge">dotnet build App</code>, we’ll see the files: <code class="language-plaintext highlighter-rouge">App\bin\Debug\net5.0\Foo.txt</code>, <code class="language-plaintext highlighter-rouge">App\bin\Debug\net5.0\Bar.txt</code>, and <code class="language-plaintext highlighter-rouge">App\bin\Debug\net5.0\Baz.txt</code>. So how did they get there?</p>

<p>First, search for “App\bin\Debug\net5.0\Foo.txt”:</p>

<p><img src="/assets/structured-log-viewer-search-1.PNG" alt="Search results for &quot;App\bin\Debug\net5.0\Foo.txt&quot;" class="center" /></p>

<p>The results at the end look related to incremental clean, so the one we want to look as is under the <code class="language-plaintext highlighter-rouge">_CopyOutOfDateSourceItemsToOutputDirectory</code> target, especially since it says “Copying file” in the log message.</p>

<p>When navigating to that result, in fact all of the content the files we were interested in (and one we weren’t) are here.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Copying file from "C:\Users\David\Code\tmp\msbuild-debugging\App\Baz.txt" to "C:\Users\David\Code\tmp\msbuild-debugging\App\bin\Debug\net5.0\Baz.txt".
Copying file from "C:\Users\David\Code\tmp\msbuild-debugging\Lib1\Foo.txt" to "C:\Users\David\Code\tmp\msbuild-debugging\App\bin\Debug\net5.0\Foo.txt".
Copying file from "C:\Users\David\Code\tmp\msbuild-debugging\App\obj\Debug\net5.0\apphost.exe" to "C:\Users\David\Code\tmp\msbuild-debugging\App\bin\Debug\net5.0\App.exe".
Copying file from "C:\Users\David\Code\tmp\msbuild-debugging\Lib2\Bar.txt" to "C:\Users\David\Code\tmp\msbuild-debugging\App\bin\Debug\net5.0\Bar.txt".
</code></pre></div></div>

<p>Upon double-clicking the target, we see the definition for <code class="language-plaintext highlighter-rouge">_CopyOutOfDateSourceItemsToOutputDirectory</code>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;Target</span>
      <span class="na">Name=</span><span class="s">"_CopyOutOfDateSourceItemsToOutputDirectory"</span>
      <span class="na">Condition=</span><span class="s">" '@(_SourceItemsToCopyToOutputDirectory)' != '' "</span>
      <span class="na">Inputs=</span><span class="s">"@(_SourceItemsToCopyToOutputDirectory)"</span>
      <span class="na">Outputs=</span><span class="s">"@(_SourceItemsToCopyToOutputDirectory-&gt;'$(OutDir)%(TargetPath)')"</span><span class="nt">&gt;</span>

    <span class="c">&lt;!--
        Not using SkipUnchangedFiles="true" because the application may want to change
        one of these files and not have an incremental build replace it.
        --&gt;</span>
    <span class="nt">&lt;Copy</span>
        <span class="na">SourceFiles =</span> <span class="s">"@(_SourceItemsToCopyToOutputDirectory)"</span>
        <span class="na">DestinationFiles =</span> <span class="s">"@(_SourceItemsToCopyToOutputDirectory-&gt;'$(OutDir)%(TargetPath)')"</span>
        <span class="na">OverwriteReadOnlyFiles=</span><span class="s">"$(OverwriteReadOnlyFiles)"</span>
        <span class="na">Retries=</span><span class="s">"$(CopyRetryCount)"</span>
        <span class="na">RetryDelayMilliseconds=</span><span class="s">"$(CopyRetryDelayMilliseconds)"</span>
        <span class="na">UseHardlinksIfPossible=</span><span class="s">"$(CreateHardLinksForAdditionalFilesIfPossible)"</span>
        <span class="na">UseSymboliclinksIfPossible=</span><span class="s">"$(CreateSymbolicLinksForAdditionalFilesIfPossible)"</span>
            <span class="nt">&gt;</span>

      <span class="nt">&lt;Output</span> <span class="na">TaskParameter=</span><span class="s">"DestinationFiles"</span> <span class="na">ItemName=</span><span class="s">"FileWrites"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;/Copy&gt;</span>

  <span class="nt">&lt;/Target&gt;</span>
</code></pre></div></div>

<p>So the <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/copy-task" target="_blank"><code class="language-plaintext highlighter-rouge">Copy</code> task</a> is called with <code class="language-plaintext highlighter-rouge">@(_SourceItemsToCopyToOutputDirectory)</code> items as the source, and copied to the <code class="language-plaintext highlighter-rouge">$(OutDir)</code> using their <code class="language-plaintext highlighter-rouge">%(TargetPath)</code> metadata.</p>

<p>Side note: by convention properties, items, and targets which are prefixed by an underscore should be considered “private”. MSBuild doesn’t have any true notion of scope or access modifiers, but it’s an indication of an implementation detail in the build logic and may change behavior or even be removed in the future. Because of this, if you are writing your own custom build logic, you should not depend on “private” entities and instead look for the appropriate extension points.</p>

<p>We can look up the value of <code class="language-plaintext highlighter-rouge">$(OutDir)</code> in a pretty straightforward way by looking at the properties for the project. In this example, we see <code class="language-plaintext highlighter-rouge">OutDir = bin\Debug\net5.0\</code>. But how did that value come about? We can look this up in the preprocess. After right-clicking the project, selecting preprocess, and doing a <code class="language-plaintext highlighter-rouge">ctrl+f</code> and looking for “<code class="language-plaintext highlighter-rouge">&lt;OutDir</code>”, we see this block of XML:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c">&lt;!-- Required for enabling Team Build for packaging app package-generating projects --&gt;</span>
    <span class="nt">&lt;OutDirWasSpecified</span> <span class="na">Condition=</span><span class="s">" '$(OutDir)'!='' and '$(OutDirWasSpecified)'=='' "</span><span class="nt">&gt;</span>true<span class="nt">&lt;/OutDirWasSpecified&gt;</span>

    <span class="nt">&lt;OutDir</span> <span class="na">Condition=</span><span class="s">" '$(OutDir)' == '' "</span><span class="nt">&gt;</span>$(OutputPath)<span class="nt">&lt;/OutDir&gt;</span>
    <span class="c">&lt;!-- Example, bin\Debug\ --&gt;</span>
    <span class="c">&lt;!-- Ensure OutDir has a trailing slash, so it can be concatenated --&gt;</span>
    <span class="nt">&lt;OutDir</span> <span class="na">Condition=</span><span class="s">"'$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)')"</span><span class="nt">&gt;</span>$(OutDir)\<span class="nt">&lt;/OutDir&gt;</span>
    <span class="nt">&lt;ProjectName</span> <span class="na">Condition=</span><span class="s">" '$(ProjectName)' == '' "</span><span class="nt">&gt;</span>$(MSBuildProjectName)<span class="nt">&lt;/ProjectName&gt;</span>
    <span class="c">&lt;!-- Example, MyProject --&gt;</span>

    <span class="c">&lt;!-- For projects that generate app packages or ones that want a per-project output directory, update OutDir to include the project name --&gt;</span>
    <span class="nt">&lt;OutDir</span> <span class="na">Condition=</span><span class="s">"'$(OutDir)' != '' and '$(OutDirWasSpecified)' == 'true' and (('$(WindowsAppContainer)' == 'true' and '$(GenerateProjectSpecificOutputFolder)' != 'false') or '$(GenerateProjectSpecificOutputFolder)' == 'true')"</span><span class="nt">&gt;</span>$(OutDir)$(ProjectName)\<span class="nt">&lt;/OutDir&gt;</span>
</code></pre></div></div>

<p>Because <code class="language-plaintext highlighter-rouge">$(OutDir)</code> wasn’t specified before this, <code class="language-plaintext highlighter-rouge">$(OutDirWasSpecified)</code> remains unset and so effectively <code class="language-plaintext highlighter-rouge">$(OutDir)</code> is simply just <code class="language-plaintext highlighter-rouge">$(OutputPath)</code> with a possible trailing slash appended if needed.</p>

<p>If we then search for “<code class="language-plaintext highlighter-rouge">&lt;OutputPath</code>”, we’ll find quite a few results.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;BaseOutputPath</span> <span class="na">Condition=</span><span class="s">"'$(BaseOutputPath)' == ''"</span><span class="nt">&gt;</span>bin\<span class="nt">&lt;/BaseOutputPath&gt;</span>
    <span class="nt">&lt;BaseOutputPath</span> <span class="na">Condition=</span><span class="s">"!HasTrailingSlash('$(BaseOutputPath)')"</span><span class="nt">&gt;</span>$(BaseOutputPath)\<span class="nt">&lt;/BaseOutputPath&gt;</span>
    <span class="nt">&lt;OutputPath</span> <span class="na">Condition=</span><span class="s">"'$(OutputPath)' == '' and '$(PlatformName)' == 'AnyCPU'"</span><span class="nt">&gt;</span>$(BaseOutputPath)$(Configuration)\<span class="nt">&lt;/OutputPath&gt;</span>
    <span class="nt">&lt;OutputPath</span> <span class="na">Condition=</span><span class="s">"'$(OutputPath)' == '' and '$(PlatformName)' != 'AnyCPU'"</span><span class="nt">&gt;</span>$(BaseOutputPath)$(PlatformName)\$(Configuration)\<span class="nt">&lt;/OutputPath&gt;</span>
    <span class="nt">&lt;OutputPath</span> <span class="na">Condition=</span><span class="s">"!HasTrailingSlash('$(OutputPath)')"</span><span class="nt">&gt;</span>$(OutputPath)\<span class="nt">&lt;/OutputPath&gt;</span>

<span class="c">&lt;!-- ... --&gt;</span>

  <span class="nt">&lt;PropertyGroup</span> <span class="na">Condition=</span><span class="s">"'$(AppendTargetFrameworkToOutputPath)' == 'true' and '$(TargetFramework)' != '' and '$(_UnsupportedTargetFrameworkError)' != 'true'"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;IntermediateOutputPath&gt;</span>$(IntermediateOutputPath)$(TargetFramework.ToLowerInvariant())\<span class="nt">&lt;/IntermediateOutputPath&gt;</span>
    <span class="nt">&lt;OutputPath&gt;</span>$(OutputPath)$(TargetFramework.ToLowerInvariant())\<span class="nt">&lt;/OutputPath&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>

<span class="c">&lt;!-- ... --&gt;</span>

  <span class="nt">&lt;PropertyGroup</span> <span class="na">Condition=</span><span class="s">"'$(AppendRuntimeIdentifierToOutputPath)' == 'true' and '$(RuntimeIdentifier)' != '' and '$(_UsingDefaultRuntimeIdentifier)' != 'true'"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;IntermediateOutputPath&gt;</span>$(IntermediateOutputPath)$(RuntimeIdentifier)\<span class="nt">&lt;/IntermediateOutputPath&gt;</span>
    <span class="nt">&lt;OutputPath&gt;</span>$(OutputPath)$(RuntimeIdentifier)\<span class="nt">&lt;/OutputPath&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>

<span class="c">&lt;!-- ... --&gt;</span>

    <span class="nt">&lt;OutputPath</span> <span class="na">Condition=</span><span class="s">"'$(OutputPath)' != '' and !HasTrailingSlash('$(OutputPath)')"</span><span class="nt">&gt;</span>$(OutputPath)\<span class="nt">&lt;/OutputPath&gt;</span>
    <span class="nt">&lt;OutputPath</span> <span class="na">Condition=</span><span class="s">" '$(Platform)'=='' and '$(Configuration)'=='' and '$(OutputPath)'=='' "</span><span class="nt">&gt;</span>bin\Debug\<span class="nt">&lt;/OutputPath&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">$(OutputPath)</code> is set many times, but it’s mostly just appended to in order to avoid collisions when building with various dimensions. It’s basically just <code class="language-plaintext highlighter-rouge">bin\&lt;platform-if-not-anycpu&gt;\&lt;configuration&gt;\&lt;target-framework&gt;\&lt;rid-if-set&gt;</code>, with various properties to control its behavior if desired.</p>

<p>It’s important here that all places where <code class="language-plaintext highlighter-rouge">$(OutDir)</code> is set are below all places where <code class="language-plaintext highlighter-rouge">$(OutputPath)</code> is set, so we don’t have to worry about ordering issues for these two properties in this case.</p>

<p>Now we understand the <code class="language-plaintext highlighter-rouge">$(OutDir)</code> part of the copy destination, so next we should understand how the <code class="language-plaintext highlighter-rouge">@(_SourceItemsToCopyToOutputDirectory)</code> item is created. When searching we see:</p>

<p><img src="/assets/structured-log-viewer-search-2.PNG" alt="Search results for &quot;_SourceItemsToCopyToOutputDirectory&quot;" class="center" /></p>

<p>We have results from all three projects, which is expected since App depends on Lib1 and Lib2, so those other projects build first and would perform this logic themselves. How exactly App causes Lib1 and Lib2 to build first I will leave as an exercise to the reader.</p>

<p>To continue answering our original question, we want to look at the result for the App project, which leads us to the <code class="language-plaintext highlighter-rouge">GetCopyToOutputDirectoryItems</code> target, which is defined as:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;Target</span>
      <span class="na">Name=</span><span class="s">"GetCopyToOutputDirectoryItems"</span>
      <span class="na">Returns=</span><span class="s">"@(AllItemsFullPathWithTargetPath)"</span>
      <span class="na">KeepDuplicateOutputs=</span><span class="s">" '$(MSBuildDisableGetCopyToOutputDirectoryItemsOptimization)' == '' "</span>
      <span class="na">DependsOnTargets=</span><span class="s">"$(GetCopyToOutputDirectoryItemsDependsOn)"</span><span class="nt">&gt;</span>

    <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;CallTarget</span> <span class="na">Targets=</span><span class="s">"_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;Output</span> <span class="na">TaskParameter=</span><span class="s">"TargetOutputs"</span> <span class="na">ItemName=</span><span class="s">"_TransitiveItemsToCopyToOutputDirectory"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/CallTarget&gt;</span>

    <span class="nt">&lt;CallTarget</span> <span class="na">Targets=</span><span class="s">"_GetCopyToOutputDirectoryItemsFromThisProject"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;Output</span> <span class="na">TaskParameter=</span><span class="s">"TargetOutputs"</span> <span class="na">ItemName=</span><span class="s">"_ThisProjectItemsToCopyToOutputDirectory"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/CallTarget&gt;</span>

    <span class="nt">&lt;ItemGroup</span> <span class="na">Condition=</span><span class="s">"'$(CopyConflictingTransitiveContent)' == 'false'"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;_TransitiveItemsToCopyToOutputDirectory</span> <span class="na">Remove=</span><span class="s">"@(_ThisProjectItemsToCopyToOutputDirectory)"</span> <span class="na">MatchOnMetadata=</span><span class="s">"TargetPath"</span> <span class="na">MatchOnMetadataOptions=</span><span class="s">"PathLike"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/ItemGroup&gt;</span>

    <span class="nt">&lt;ItemGroup&gt;</span>
      <span class="nt">&lt;_TransitiveItemsToCopyToOutputDirectoryAlways</span>               <span class="na">KeepDuplicates=</span><span class="s">" '$(_GCTODIKeepDuplicates)' != 'false' "</span> <span class="na">KeepMetadata=</span><span class="s">"$(_GCTODIKeepMetadata)"</span> <span class="na">Include=</span><span class="s">"@(_TransitiveItemsToCopyToOutputDirectory-&gt;'%(FullPath)')"</span> <span class="na">Condition=</span><span class="s">"'%(_TransitiveItemsToCopyToOutputDirectory.CopyToOutputDirectory)'=='Always'"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;_TransitiveItemsToCopyToOutputDirectoryPreserveNewest</span>       <span class="na">KeepDuplicates=</span><span class="s">" '$(_GCTODIKeepDuplicates)' != 'false' "</span> <span class="na">KeepMetadata=</span><span class="s">"$(_GCTODIKeepMetadata)"</span> <span class="na">Include=</span><span class="s">"@(_TransitiveItemsToCopyToOutputDirectory-&gt;'%(FullPath)')"</span> <span class="na">Condition=</span><span class="s">"'%(_TransitiveItemsToCopyToOutputDirectory.CopyToOutputDirectory)'=='PreserveNewest'"</span><span class="nt">/&gt;</span>

      <span class="nt">&lt;_ThisProjectItemsToCopyToOutputDirectoryAlways</span>              <span class="na">KeepDuplicates=</span><span class="s">" '$(_GCTODIKeepDuplicates)' != 'false' "</span> <span class="na">KeepMetadata=</span><span class="s">"$(_GCTODIKeepMetadata)"</span> <span class="na">Include=</span><span class="s">"@(_ThisProjectItemsToCopyToOutputDirectory-&gt;'%(FullPath)')"</span> <span class="na">Condition=</span><span class="s">"'%(_ThisProjectItemsToCopyToOutputDirectory.CopyToOutputDirectory)'=='Always'"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;_ThisProjectItemsToCopyToOutputDirectoryPreserveNewest</span>      <span class="na">KeepDuplicates=</span><span class="s">" '$(_GCTODIKeepDuplicates)' != 'false' "</span> <span class="na">KeepMetadata=</span><span class="s">"$(_GCTODIKeepMetadata)"</span> <span class="na">Include=</span><span class="s">"@(_ThisProjectItemsToCopyToOutputDirectory-&gt;'%(FullPath)')"</span> <span class="na">Condition=</span><span class="s">"'%(_ThisProjectItemsToCopyToOutputDirectory.CopyToOutputDirectory)'=='PreserveNewest'"</span><span class="nt">/&gt;</span>

      <span class="c">&lt;!-- Append the items from this project last so that they will be copied last. --&gt;</span>
      <span class="nt">&lt;_SourceItemsToCopyToOutputDirectoryAlways</span>                   <span class="na">Include=</span><span class="s">"@(_TransitiveItemsToCopyToOutputDirectoryAlways);@(_ThisProjectItemsToCopyToOutputDirectoryAlways)"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;_SourceItemsToCopyToOutputDirectory</span>                         <span class="na">Include=</span><span class="s">"@(_TransitiveItemsToCopyToOutputDirectoryPreserveNewest);@(_ThisProjectItemsToCopyToOutputDirectoryPreserveNewest)"</span><span class="nt">/&gt;</span>

      <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;/ItemGroup&gt;</span>

  <span class="nt">&lt;/Target&gt;</span>
</code></pre></div></div>

<p>And in the execution logs we see:</p>

<p><img src="/assets/structured-log-viewer-gctodi.PNG" alt="The GetCopyToOutputDirectoryItems target" class="center" /></p>

<p>Using the combination of the definition and the execution log, we see that this target ends up calling 2 other targets, <code class="language-plaintext highlighter-rouge">_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences</code> and <code class="language-plaintext highlighter-rouge">_GetCopyToOutputDirectoryItemsFromThisProject</code>, and aggregates and filters the resulting items into <code class="language-plaintext highlighter-rouge">@(_SourceItemsToCopyToOutputDirectoryAlways)</code> and <code class="language-plaintext highlighter-rouge">@(_SourceItemsToCopyToOutputDirectory)</code> items.</p>

<p>Based on the names we can guess what’s going on already. One target gathers items from project references while the other gathers items from this project. Then they’re separated into an “always” and a “preserve newest” item. We’ll focus on <code class="language-plaintext highlighter-rouge">@(_SourceItemsToCopyToOutputDirectory)</code> since that’s what we are tracing, but the “always” variant works very similarly except the file copies are unconditional instead of dependent on file timestamps.</p>

<p>Let’s look at <code class="language-plaintext highlighter-rouge">_GetCopyToOutputDirectoryItemsFromThisProject</code> first since it’s from this project and will likely be easier to follow. After searching abd finding the instance under the App project, we find that it’s defined as:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;Target</span>
      <span class="na">Name=</span><span class="s">"_GetCopyToOutputDirectoryItemsFromThisProject"</span>
      <span class="na">DependsOnTargets=</span><span class="s">"AssignTargetPaths;_PopulateCommonStateForGetCopyToOutputDirectoryItems"</span>
      <span class="na">Returns=</span><span class="s">"@(_ThisProjectItemsToCopyToOutputDirectory)"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;ItemGroup&gt;</span>
      <span class="nt">&lt;_ThisProjectItemsToCopyToOutputDirectory</span>       <span class="na">KeepMetadata=</span><span class="s">"$(_GCTODIKeepMetadata)"</span> <span class="na">Include=</span><span class="s">"@(ContentWithTargetPath-&gt;'%(FullPath)')"</span> <span class="na">Condition=</span><span class="s">"'%(ContentWithTargetPath.CopyToOutputDirectory)'=='Always' AND '%(ContentWithTargetPath.MSBuildSourceProjectFile)'==''"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;_ThisProjectItemsToCopyToOutputDirectory</span>       <span class="na">KeepMetadata=</span><span class="s">"$(_GCTODIKeepMetadata)"</span> <span class="na">Include=</span><span class="s">"@(ContentWithTargetPath-&gt;'%(FullPath)')"</span> <span class="na">Condition=</span><span class="s">"'%(ContentWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest' AND '%(ContentWithTargetPath.MSBuildSourceProjectFile)'==''"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/ItemGroup&gt;</span>

    <span class="c">&lt;!-- ... --&gt;</span>

  <span class="nt">&lt;/Target&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">_GetCopyToOutputDirectoryItemsFromThisProject</code> simply aggregates <code class="language-plaintext highlighter-rouge">@(ContentWithTargetPath)</code>, <code class="language-plaintext highlighter-rouge">@(_NoneWithTargetPath)</code>, <code class="language-plaintext highlighter-rouge">@(EmbeddedResource)</code>, and for some reason <code class="language-plaintext highlighter-rouge">@(Compile)</code> items which have either <code class="language-plaintext highlighter-rouge">%(CopyToOutputDirectory)</code> as either “Always” or “PreserveNewest”.</p>

<p>Then if we look up <code class="language-plaintext highlighter-rouge">@(ContentWithTargetPath)</code> items, we’ll find the <code class="language-plaintext highlighter-rouge">AssignTargetPaths</code> target:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;Target</span>
      <span class="na">Name=</span><span class="s">"AssignTargetPaths"</span>
      <span class="na">DependsOnTargets=</span><span class="s">"$(AssignTargetPathsDependsOn)"</span><span class="nt">&gt;</span>

    <span class="c">&lt;!-- ... --&gt;</span>

    <span class="nt">&lt;AssignTargetPath</span> <span class="na">Files=</span><span class="s">"@(Content)"</span> <span class="na">RootFolder=</span><span class="s">"$(MSBuildProjectDirectory)"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;Output</span> <span class="na">TaskParameter=</span><span class="s">"AssignedFiles"</span> <span class="na">ItemName=</span><span class="s">"ContentWithTargetPath"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/AssignTargetPath&gt;</span>

    <span class="c">&lt;!-- ... --&gt;</span>

  <span class="nt">&lt;/Target&gt;</span>
</code></pre></div></div>

<p>The <a href="https://github.com/dotnet/msbuild/blob/master/src/Tasks/AssignTargetPath.cs" target="_blank">AssignTargetPath task</a> adds the <code class="language-plaintext highlighter-rouge">%(TargetPath)</code> metadata for items, which is either based on the <code class="language-plaintext highlighter-rouge">%(Link)</code> metadata if provided, or the relative path of the file from the project directory if it’s under the project directory, or simply the filename otherwise.</p>

<p>Finally, we now see how the <code class="language-plaintext highlighter-rouge">@(Content)</code> item for the current project (<code class="language-plaintext highlighter-rouge">Baz.txt</code> in our example) gets copied to the output folder.</p>

<p>But we still need to understand the content from the referenced projects, <code class="language-plaintext highlighter-rouge">Foo.txt</code> and <code class="language-plaintext highlighter-rouge">Bar.txt</code>. Upon searching for <code class="language-plaintext highlighter-rouge">_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences</code>, finding the result in the App project, and looking at the definition, we see:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="nt">&lt;PropertyGroup&gt;</span>
    <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;_RecursiveTargetForContentCopying&gt;</span>GetCopyToOutputDirectoryItems<span class="nt">&lt;/_RecursiveTargetForContentCopying&gt;</span>
    <span class="c">&lt;!-- ... --&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>

  <span class="c">&lt;!-- ... --&gt;</span>

  <span class="nt">&lt;Target</span>
    <span class="na">Name=</span><span class="s">"_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences"</span>
    <span class="na">DependsOnTargets=</span><span class="s">"_PopulateCommonStateForGetCopyToOutputDirectoryItems;_AddOutputPathToGlobalPropertiesToRemove"</span>
    <span class="na">Returns=</span><span class="s">"@(_TransitiveItemsToCopyToOutputDirectory)"</span><span class="nt">&gt;</span>

    <span class="c">&lt;!-- Get items from child projects first. --&gt;</span>
    <span class="nt">&lt;MSBuild</span>
        <span class="na">Projects=</span><span class="s">"@(_MSBuildProjectReferenceExistent)"</span>
        <span class="na">Targets=</span><span class="s">"$(_RecursiveTargetForContentCopying)"</span>
        <span class="na">BuildInParallel=</span><span class="s">"$(BuildInParallel)"</span>
        <span class="na">Properties=</span><span class="s">"%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform); %(_MSBuildProjectReferenceExistent.SetTargetFramework)"</span>
        <span class="na">Condition=</span><span class="s">"'@(_MSBuildProjectReferenceExistent)' != '' and '$(_GetChildProjectCopyToOutputDirectoryItems)' == 'true' and '%(_MSBuildProjectReferenceExistent.Private)' != 'false' and '$(UseCommonOutputDirectory)' != 'true'"</span>
        <span class="na">ContinueOnError=</span><span class="s">"$(ContinueOnError)"</span>
        <span class="na">SkipNonexistentTargets=</span><span class="s">"true"</span>
        <span class="na">RemoveProperties=</span><span class="s">"%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)"</span><span class="nt">&gt;</span>

      <span class="nt">&lt;Output</span> <span class="na">TaskParameter=</span><span class="s">"TargetOutputs"</span> <span class="na">ItemName=</span><span class="s">"_AllChildProjectItemsWithTargetPath"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;/MSBuild&gt;</span>

    <span class="nt">&lt;ItemGroup&gt;</span>
      <span class="nt">&lt;_TransitiveItemsToCopyToOutputDirectory</span>   <span class="na">KeepDuplicates=</span><span class="s">" '$(_GCTODIKeepDuplicates)' != 'false' "</span> <span class="na">KeepMetadata=</span><span class="s">"$(_GCTODIKeepMetadata)"</span> <span class="na">Include=</span><span class="s">"@(_AllChildProjectItemsWithTargetPath-&gt;'%(FullPath)')"</span> <span class="na">Condition=</span><span class="s">"'%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='Always'"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;_TransitiveItemsToCopyToOutputDirectory</span>   <span class="na">KeepDuplicates=</span><span class="s">" '$(_GCTODIKeepDuplicates)' != 'false' "</span> <span class="na">KeepMetadata=</span><span class="s">"$(_GCTODIKeepMetadata)"</span> <span class="na">Include=</span><span class="s">"@(_AllChildProjectItemsWithTargetPath-&gt;'%(FullPath)')"</span> <span class="na">Condition=</span><span class="s">"'%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/ItemGroup&gt;</span>

    <span class="c">&lt;!-- ... --&gt;</span>

  <span class="nt">&lt;/Target&gt;</span>
</code></pre></div></div>

<p>So <code class="language-plaintext highlighter-rouge">_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences</code> simply calls the <code class="language-plaintext highlighter-rouge">GetCopyToOutputDirectoryItems</code> target on all project references.</p>

<p>As we’ve already seen, <code class="language-plaintext highlighter-rouge">GetCopyToOutputDirectoryItems</code> gathers the “copy items” (<code class="language-plaintext highlighter-rouge">@(Content)</code>, <code class="language-plaintext highlighter-rouge">@(None)</code>, etc. with specific <code class="language-plaintext highlighter-rouge">CopyToOutputDirectory</code> values) from a project and its dependencies recursively, so we finally fully understand how <code class="language-plaintext highlighter-rouge">Foo.txt</code> and <code class="language-plaintext highlighter-rouge">Bar.txt</code> were copied!</p>

<p>Better yet, we now know how to debug MSBuild!</p>]]></content><author><name>Iwan Setiawan</name></author><category term=".NET" /><category term="MSBuild" /><category term=".NET" /><category term="MSBuild" /><category term="build" /><category term="debugging" /><summary type="html"><![CDATA[At work I live primarily in the build space, specifically MSBuild-based environments, and a common trend I’ve noticed is that many developers struggle with MSBuild. The reason for this isn’t typically because the build space is “too hard”, or at least not much harder than any other kind of programming, but instead because the MSBuild syntax is effectively its own language and debugging execution of that language is not something most developers know how to do. This article attempts to provide various techniques for debugging MSBuild execution.]]></summary></entry><entry><title type="html">Building a Console App with .NET Generic Host</title><link href="http://192.168.5.71:4000/.net/2020/08/24/building-a-console-app-with-.net-generic-host/" rel="alternate" type="text/html" title="Building a Console App with .NET Generic Host" /><published>2020-08-24T00:00:00+07:00</published><updated>2020-08-24T00:00:00+07:00</updated><id>http://192.168.5.71:4000/.net/2020/08/24/building-a-console-app-with-.net-generic-host</id><content type="html" xml:base="http://192.168.5.71:4000/.net/2020/08/24/building-a-console-app-with-.net-generic-host/"><![CDATA[<p>The <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host" target="_blank">.NET Generic Host</a> is a feature which sets up some convenient patterns for an application including those for <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection" target="_blank">dependency injection (DI)</a>, <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging" target="_blank">logging</a>, and <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration" target="_blank">configuration</a>. It was originally named Web Host and intended for Web scenarios like ASP.NET Core applications but has since been generalized (hence the rename to <em>Generic</em> Host) to support other scenarios, such as Windows services, Linux daemon services, or even a console app.</p>

<p>A working example can be found at <a href="https://github.com/dfederm/GenericHostConsoleApp" target="_blank">dfederm/GenericHostConsoleApp</a>.</p>

<h2 id="basics">Basics</h2>

<p>You will first need to create a new console application and add a <code class="language-plaintext highlighter-rouge">PackageReference</code> to <a href="https://www.nuget.org/packages/Microsoft.Extensions.Hosting/" target="_blank"><code class="language-plaintext highlighter-rouge">Microsoft.Extensions.Hosting</code></a>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new console
dotnet add package Microsoft.Extensions.Hosting
</code></pre></div></div>

<p>Now for the <code class="language-plaintext highlighter-rouge">Main</code> method. Typically the <code class="language-plaintext highlighter-rouge">Main</code> method for console apps just immediately jump into the application’s core logic, but when using the .NET Generic Host, instead the host is set up. This should look familiar if you’ve developed web applications using the Web Host or Generic Host before.</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">internal</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">await</span> <span class="n">Host</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">RunConsoleAsync</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Running that alone will start up the host, but without any logic it will do nothing and never exit. The generic host simply sets up some reasonable <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host#default-builder-settings" target="_blank">defaults</a> around configuration and logging, as well as provides a few services in the DI container which handle the the application lifetime. Calling <code class="language-plaintext highlighter-rouge">RunConsoleAsync</code> will run start the host and wait for a <code class="language-plaintext highlighter-rouge">Ctrl+C</code> or <code class="language-plaintext highlighter-rouge">SIGTERM</code> to exit, which means without explicitly telling the app to exit, it will not exit.</p>

<p>To actually implement your console app’s logic, and get the application to exit after it’s done, you’ll want to implement and register an <code class="language-plaintext highlighter-rouge">IHostedService</code>, as well as interact with the <code class="language-plaintext highlighter-rouge">IHostApplicationLifetime</code> from the DI container.</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">internal</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">await</span> <span class="n">Host</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">ConfigureServices</span><span class="p">((</span><span class="n">hostContext</span><span class="p">,</span> <span class="n">services</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">services</span><span class="p">.</span><span class="n">AddHostedService</span><span class="p">&lt;</span><span class="n">ConsoleHostedService</span><span class="p">&gt;();</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nf">RunConsoleAsync</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">internal</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">ConsoleHostedService</span> <span class="p">:</span> <span class="n">IHostedService</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">ILogger</span> <span class="n">_logger</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IHostApplicationLifetime</span> <span class="n">_appLifetime</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">ConsoleHostedService</span><span class="p">(</span>
        <span class="n">ILogger</span><span class="p">&lt;</span><span class="n">ConsoleHostedService</span><span class="p">&gt;</span> <span class="n">logger</span><span class="p">,</span>
        <span class="n">IHostApplicationLifetime</span> <span class="n">appLifetime</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_logger</span> <span class="p">=</span> <span class="n">logger</span><span class="p">;</span>
        <span class="n">_appLifetime</span> <span class="p">=</span> <span class="n">appLifetime</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">StartAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_logger</span><span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">$"Starting with arguments: </span><span class="p">{</span><span class="kt">string</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetCommandLineArgs</span><span class="p">())}</span><span class="s">"</span><span class="p">);</span>

        <span class="n">_appLifetime</span><span class="p">.</span><span class="n">ApplicationStarted</span><span class="p">.</span><span class="nf">Register</span><span class="p">(()</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="k">try</span>
                <span class="p">{</span>
                    <span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">);</span>

                    <span class="c1">// Simulate real work is being done</span>
                    <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Delay</span><span class="p">(</span><span class="m">1000</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">_logger</span><span class="p">.</span><span class="nf">LogError</span><span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="s">"Unhandled exception!"</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">finally</span>
                <span class="p">{</span>
                    <span class="c1">// Stop the application once the work is done</span>
                    <span class="n">_appLifetime</span><span class="p">.</span><span class="nf">StopApplication</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">});</span>
        <span class="p">});</span>

        <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">StopAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Other useful events to subscribe to on the <code class="language-plaintext highlighter-rouge">IHostApplicationLifetime</code> are <code class="language-plaintext highlighter-rouge">ApplicationStopping</code> and <code class="language-plaintext highlighter-rouge">ApplicationStopped</code>.</p>

<p>Note that you can registrer multiple <code class="language-plaintext highlighter-rouge">IHostedService</code> implementations and each of them will have their <code class="language-plaintext highlighter-rouge">StartAsync</code> and <code class="language-plaintext highlighter-rouge">StopAsync</code> methods called. However, personally I find that to be a bit confusing for a console application, so I would just stick to a single <code class="language-plaintext highlighter-rouge">IHostedService</code>.</p>

<h2 id="dependency-injection">Dependency Injection</h2>

<p>As you may have noticed, your <code class="language-plaintext highlighter-rouge">IHostedService</code> implementation has full access to the DI container, so you can register services in <code class="language-plaintext highlighter-rouge">Main</code> and then use them in your <code class="language-plaintext highlighter-rouge">IHostedService</code>.</p>

<p>In <code class="language-plaintext highlighter-rouge">Main</code>:</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="n">Host</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">ConfigureServices</span><span class="p">((</span><span class="n">hostContext</span><span class="p">,</span> <span class="n">services</span><span class="p">)</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">services</span>
            <span class="p">.</span><span class="n">AddHostedService</span><span class="p">&lt;</span><span class="n">ConsoleHostedService</span><span class="p">&gt;();</span>
            <span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IWeatherService</span><span class="p">,</span> <span class="n">WeatherService</span><span class="p">&gt;();</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nf">RunConsoleAsync</span><span class="p">();</span>
</code></pre></div></div>

<p>In <code class="language-plaintext highlighter-rouge">ConsoleHostedService</code></p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">readonly</span> <span class="n">ILogger</span> <span class="n">_logger</span><span class="p">;</span>
<span class="k">private</span> <span class="k">readonly</span> <span class="n">IHostApplicationLifetime</span> <span class="n">_appLifetime</span><span class="p">;</span>
<span class="k">private</span> <span class="k">readonly</span> <span class="n">IWeatherService</span> <span class="n">_weatherService</span><span class="p">;</span>

<span class="k">public</span> <span class="nf">ConsoleHostedService</span><span class="p">(</span>
    <span class="n">ILogger</span><span class="p">&lt;</span><span class="n">ConsoleHostedService</span><span class="p">&gt;</span> <span class="n">logger</span><span class="p">,</span>
    <span class="n">IHostApplicationLifetime</span> <span class="n">appLifetime</span><span class="p">,</span>
    <span class="n">IWeatherService</span> <span class="n">weatherService</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">_logger</span> <span class="p">=</span> <span class="n">logger</span><span class="p">;</span>
    <span class="n">_appLifetime</span> <span class="p">=</span> <span class="n">appLifetime</span><span class="p">;</span>
    <span class="n">_weatherService</span> <span class="p">=</span> <span class="n">weatherService</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="n">Task</span> <span class="nf">StartAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">_appLifetime</span><span class="p">.</span><span class="n">ApplicationStarted</span><span class="p">.</span><span class="nf">Register</span><span class="p">(()</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">temperatures</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_weatherService</span><span class="p">.</span><span class="nf">GetFiveDayTemperaturesAsync</span><span class="p">();</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">temperatures</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                <span class="p">{</span>
                    <span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="s">$"</span><span class="p">{</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">.</span><span class="nf">AddDays</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">DayOfWeek</span><span class="p">}</span><span class="s">: </span><span class="p">{</span><span class="n">temperatures</span><span class="p">[</span><span class="n">i</span><span class="p">]}</span><span class="s">"</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_logger</span><span class="p">.</span><span class="nf">LogError</span><span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="s">"Unhandled exception!"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// Stop the application once the work is done</span>
                <span class="n">_appLifetime</span><span class="p">.</span><span class="nf">StopApplication</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="exit-code">Exit Code</h2>
<p>To return a non-zero exit code, your <code class="language-plaintext highlighter-rouge">IHostedService</code> implementation can set <code class="language-plaintext highlighter-rouge">Environment.ExitCode</code> when the host is stopping.</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">internal</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">ConsoleHostedService</span> <span class="p">:</span> <span class="n">IHostedService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="kt">int</span><span class="p">?</span> <span class="n">_exitCode</span><span class="p">;</span>

        <span class="c1">// ...</span>

        <span class="k">public</span> <span class="n">Task</span> <span class="nf">StartAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// ...</span>

            <span class="n">_appLifetime</span><span class="p">.</span><span class="n">ApplicationStarted</span><span class="p">.</span><span class="nf">Register</span><span class="p">(()</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="p">=&gt;</span>
                <span class="p">{</span>
                    <span class="k">try</span>
                    <span class="p">{</span>
                        <span class="c1">// ...</span>

                        <span class="n">_exitCode</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">_logger</span><span class="p">.</span><span class="nf">LogError</span><span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="s">"Unhandled exception!"</span><span class="p">);</span>
                        <span class="n">_exitCode</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="k">finally</span>
                    <span class="p">{</span>
                        <span class="c1">// Stop the application once the work is done</span>
                        <span class="n">_appLifetime</span><span class="p">.</span><span class="nf">StopApplication</span><span class="p">();</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">});</span>

            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span> <span class="nf">StopAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_logger</span><span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">$"Exiting with return code: </span><span class="p">{</span><span class="n">_exitCode</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>

            <span class="c1">// Exit code may be null if the user cancelled via Ctrl+C/SIGTERM</span>
            <span class="n">Environment</span><span class="p">.</span><span class="n">ExitCode</span> <span class="p">=</span> <span class="n">_exitCode</span><span class="p">.</span><span class="nf">GetValueOrDefault</span><span class="p">(-</span><span class="m">1</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="logging-and-configuration">Logging and Configuration</h2>
<p>Logging and configuration work mostly just as they do in Web applications. The one caveat is that because <code class="language-plaintext highlighter-rouge">appsettings.json</code> is loaded from the content root, which for the Generic Host is the current working directory by default, the content root needs to be set to the same directly the executable is in using <code class="language-plaintext highlighter-rouge">UseContentRoot</code>.</p>

<p>In <code class="language-plaintext highlighter-rouge">Main</code>:</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="n">Host</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">UseContentRoot</span><span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="nf">GetDirectoryName</span><span class="p">(</span><span class="n">Assembly</span><span class="p">.</span><span class="nf">GetExecutingAssembly</span><span class="p">().</span><span class="n">Location</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">ConfigureLogging</span><span class="p">(</span><span class="n">logging</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="c1">// Add any 3rd party loggers like NLog or Serilog</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nf">ConfigureServices</span><span class="p">((</span><span class="n">hostContext</span><span class="p">,</span> <span class="n">services</span><span class="p">)</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">services</span>
            <span class="p">.</span><span class="n">AddHostedService</span><span class="p">&lt;</span><span class="n">ConsoleHostedService</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IWeatherService</span><span class="p">,</span> <span class="n">WeatherService</span><span class="p">&gt;();</span>

        <span class="n">services</span><span class="p">.</span><span class="n">AddOptions</span><span class="p">&lt;</span><span class="n">WeatherSettings</span><span class="p">&gt;().</span><span class="nf">Bind</span><span class="p">(</span><span class="n">hostContext</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetSection</span><span class="p">(</span><span class="s">"Weather"</span><span class="p">));</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nf">RunConsoleAsync</span><span class="p">();</span>
</code></pre></div></div>

<p>In <code class="language-plaintext highlighter-rouge">WeatherService.cs</code>:</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">internal</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">WeatherService</span> <span class="p">:</span> <span class="n">IWeatherService</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IOptions</span><span class="p">&lt;</span><span class="n">WeatherSettings</span><span class="p">&gt;</span> <span class="n">_weatherSettings</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">WeatherService</span><span class="p">(</span><span class="n">IOptions</span><span class="p">&lt;</span><span class="n">WeatherSettings</span><span class="p">&gt;</span> <span class="n">weatherSettings</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_weatherSettings</span> <span class="p">=</span> <span class="n">weatherSettings</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;&gt;</span> <span class="nf">GetFiveDayTemperaturesAsync</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">int</span><span class="p">[]</span> <span class="n">temperatures</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="m">76</span><span class="p">,</span> <span class="m">76</span><span class="p">,</span> <span class="m">77</span><span class="p">,</span> <span class="m">79</span><span class="p">,</span> <span class="m">78</span> <span class="p">};</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_weatherSettings</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">Unit</span><span class="p">.</span><span class="nf">Equals</span><span class="p">(</span><span class="s">"C"</span><span class="p">,</span> <span class="n">StringComparison</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">temperatures</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="n">temperatures</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="nf">Round</span><span class="p">((</span><span class="n">temperatures</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">-</span> <span class="m">32</span><span class="p">)</span> <span class="p">/</span> <span class="m">1.8</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">FromResult</span><span class="p">&lt;</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;&gt;(</span><span class="n">temperatures</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In <code class="language-plaintext highlighter-rouge">WeatherSettings.cs</code>:</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">internal</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">WeatherSettings</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Unit</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the project file:</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;Content</span> <span class="na">Include=</span><span class="s">"appsettings.json"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;CopyToOutputDirectory&gt;</span>PreserveNewest<span class="nt">&lt;/CopyToOutputDirectory&gt;</span>
    <span class="nt">&lt;/Content&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>
</code></pre></div></div>

<p>In <code class="language-plaintext highlighter-rouge">appsettings.json</code>:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
            </span><span class="err">//</span><span class="w"> </span><span class="err">Avoid</span><span class="w"> </span><span class="err">logging</span><span class="w"> </span><span class="err">lifetime</span><span class="w"> </span><span class="err">events</span><span class="w">
            </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"Weather"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Unit"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>]]></content><author><name>Iwan Setiawan</name></author><category term=".NET" /><category term=".NET" /><category term="console" /><category term="CLI" /><category term="generic host" /><summary type="html"><![CDATA[The .NET Generic Host is a feature which sets up some convenient patterns for an application including those for dependency injection (DI), logging, and configuration. It was originally named Web Host and intended for Web scenarios like ASP.NET Core applications but has since been generalized (hence the rename to Generic Host) to support other scenarios, such as Windows services, Linux daemon services, or even a console app.]]></summary></entry><entry><title type="html">Setting up a Security System with Home Assistant</title><link href="http://192.168.5.71:4000/home%20automation/self%20hosting/2020/04/25/setting-up-a-security-system-with-home-assistant/" rel="alternate" type="text/html" title="Setting up a Security System with Home Assistant" /><published>2020-04-25T00:00:00+07:00</published><updated>2020-04-25T00:00:00+07:00</updated><id>http://192.168.5.71:4000/home%20automation/self%20hosting/2020/04/25/setting-up-a-security-system-with-home-assistant</id><content type="html" xml:base="http://192.168.5.71:4000/home%20automation/self%20hosting/2020/04/25/setting-up-a-security-system-with-home-assistant/"><![CDATA[<p><strong>Update Jun 3, 2020:</strong> Adjusted for breaking changes in version 0.110.</p>

<p>I’ve been <a href="/home%20automation/self%20hosting/2019/07/11/migrating-from-webcore-to-home-assistant/">dabbling with home automation</a> for a while, and one thing that bugged me was that my home security system didn’t integrate with it at all. Doors and windows being opened seemed like something I would want to be available to me in <a href="https://www.home-assistant.io/" target="_blank">Home Assistant</a>, but the ADT system I had was completely closed despite being wireless. Instead of duplicating the sensors, I decided to ditch ADT and just completely do it myself. As a bonus, it’s saving me $50/month (although to be fair they offered a substantial discount to entice me to stay upon cancelling).</p>

<h2 id="devices">Devices</h2>
<p>Admittedly, there was a bit of an up front cost in buying all the devices to replace my existing ones, especially since I decided to go with <a href="https://www.z-wave.com/" target="_blank">Z-Wave</a> devices for my home, which are a little more expensive than <a href="https://zigbeealliance.org/" target="_blank">Zigbee</a> ones. However, this can be mitigated by prioritizing the important sensors first and adding on over time. Also, for me at least it more than made up for the cost in just a few months after cancelling my monthly bill with ADT.</p>

<p>My original security system was pretty basic, so I just ended up mimicking it. The devices I bought were:</p>
<ul>
  <li><a href="https://www.amazon.com/gp/product/B01GK5D1PE?&amp;_encoding=UTF8&amp;tag=dfederm-20&amp;linkCode=ur2&amp;linkId=31f9576650a63bc0b982ca71eef12db4&amp;camp=1789&amp;creative=9325" target="_blank" rel="nofollow">Aeotec Door/Window Sensors</a> - At the time I bought the Gen5 ones which no longer seem available, and the Gen6 ones looks pretty bulky and expensive. Any basic window/door sensor would do here though.</li>
  <li><a href="https://www.amazon.com/gp/product/B01DSRGGXQ?&amp;_encoding=UTF8&amp;tag=dfederm-20&amp;linkCode=ur2&amp;linkId=2ac28a9b977d33ef0fe4dc213e41709c&amp;camp=1789&amp;creative=9325" target="_blank" rel="nofollow">GoControl Glass Break Detector</a> - The living room and kitchen are connected and have quite a few windows, so my old system had a glass break sensor which I used this to replace. Honestly I’m not sure how well this works, and in general I had a hard time finding a Z-Wave glass break detector. Looking back it may have been better to bite the bullet and just buy a few extra window sensors instead of this.</li>
  <li><a href="https://www.amazon.com/gp/product/B00PKKM2HO?&amp;_encoding=UTF8&amp;tag=dfederm-20&amp;linkCode=ur2&amp;linkId=394b9599d6742dc1aa8ec7484eec5090&amp;camp=1789&amp;creative=9325" target="_blank" rel="nofollow">Aeotec Siren</a> - This thing works great. It’s quite loud and has a battery backup so you can’t just unplug it from the wall to get it to stop. It’s configurable enough too in terms of loudness and the tones it uses. I originally was hoping to use it as a door/window chime for when the alarm was not set, but it doesn’t quite work for that and I went with a different solution instead.</li>
</ul>

<p>Some relevant devices I already had before this project are:</p>
<ul>
  <li><a href="https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/" target="_blank">Raspberry Pi 3 B+</a> - Runs <a href="https://www.home-assistant.io/" target="_blank">Home Assistant</a></li>
  <li><a href="https://www.amazon.com/Aeotec-Z-Stick-Z-Wave-create-gateway/dp/B00X0AWA6E?&amp;_encoding=UTF8&amp;tag=dfederm-20&amp;linkCode=ur2&amp;linkId=869c4575443e0b07f2c392ad2e544376&amp;camp=1789&amp;creative=9325" target="_blank" rel="nofollow">Aeotec Z-Stick</a> - Hub for my <a href="https://www.z-wave.com/" target="_blank">Z-Wave</a> devices, plugged into the Pi</li>
  <li><a href="https://www.amazon.com/gp/product/B00AGK9KOG?th=1&amp;_encoding=UTF8&amp;tag=dfederm-20&amp;linkCode=ur2&amp;linkId=b78bcd5a0f6aeab045efd9674f1f29bd&amp;camp=1789&amp;creative=9325" target="_blank" rel="nofollow">Schlage Z-Wave Connect Locks</a> - These work great. They’re battery powered but last at least a year. Made by a company specializing in locks and they feel solid and secure.</li>
  <li><a href="https://www.amazon.com/Echo-Dot/dp/B07FZ8S74R?&amp;_encoding=UTF8&amp;tag=dfederm-20&amp;linkCode=ur2&amp;linkId=6c61d099f0b1d43cdc9c60dee736a021&amp;camp=1789&amp;creative=9325" target="_blank" rel="nofollow">Alexa Echo Dot</a> - Used with the <a href="https://github.com/custom-components/alexa_media_player" target="_blank">alexa_media_player</a> custom component for voice notifications.</li>
</ul>

<h2 id="home-assistant-configuration">Home Assistant configuration</h2>
<p><a href="https://www.home-assistant.io/" target="_blank">Home Assistant</a> has a built-in <a href="https://www.home-assistant.io/integrations/manual" target="_blank">Manual Alarm Control Panel</a> which allows you to display a keypad in the lovelace UI as well as use automations to arms and disarm the alarm.</p>

<h3 id="the-basics">The basics</h3>

<p>The alarm configuration is a little complicated, but basically it’s just a state machine. At any given time, the alarm can be <code class="language-plaintext highlighter-rouge">disarmed</code>, <code class="language-plaintext highlighter-rouge">arming</code>, <code class="language-plaintext highlighter-rouge">armed_home</code>, <code class="language-plaintext highlighter-rouge">armed_away</code>, <code class="language-plaintext highlighter-rouge">pending</code>, or <code class="language-plaintext highlighter-rouge">triggered</code>. The difference between <code class="language-plaintext highlighter-rouge">armed_away</code> and <code class="language-plaintext highlighter-rouge">armed_home</code> is that <code class="language-plaintext highlighter-rouge">armed_away</code> gives you some time to leave the house and also some time to disarm when you come back. I chose to give a 2 minute delay when leaving the house and a 1 minute delay when coming home. The <code class="language-plaintext highlighter-rouge">arming</code> and <code class="language-plaintext highlighter-rouge">pending</code> states are what it’s in during these delays. <code class="language-plaintext highlighter-rouge">disarmed</code> and <code class="language-plaintext highlighter-rouge">triggered</code> should be obvious; they’re when the alarm is turned off and “the alarm is sounding”, respectively.</p>

<p>You can use my <code class="language-plaintext highlighter-rouge">alarm_control_panel</code> configuration as a starting point, which looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">alarm_control_panel</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">manual</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Alarm</span>
    <span class="na">code</span><span class="pi">:</span> <span class="kt">!secret</span> <span class="s">alarm_control_panel_code</span>
    <span class="c1"># Don't require the code to arm the alarm</span>
    <span class="na">code_arm_required</span><span class="pi">:</span> <span class="no">false</span>
    <span class="c1"># Arm again after triggering</span>
    <span class="na">disarm_after_trigger</span><span class="pi">:</span> <span class="no">false</span>
    <span class="c1"># Delay from arming and becoming armed, eg. to leave the house.</span>
    <span class="na">arming_time</span><span class="pi">:</span> <span class="m">120</span>
    <span class="c1"># Allow time to disarm the alarm before it triggers, eg. when arriving home</span>
    <span class="na">delay_time</span><span class="pi">:</span> <span class="m">60</span>
    <span class="c1"># Amount of time the alarm is triggered for</span>
    <span class="na">trigger_time</span><span class="pi">:</span> <span class="m">600</span>
    <span class="na">disarmed</span><span class="pi">:</span>
      <span class="c1"># Ensure the alarm can never be directly triggered when disarmed</span>
      <span class="na">trigger_time</span><span class="pi">:</span> <span class="m">0</span>
    <span class="na">armed_home</span><span class="pi">:</span>
      <span class="c1"># Leave no delay between arming -&gt; armed</span>
      <span class="na">arming_time</span><span class="pi">:</span> <span class="m">0</span>
      <span class="c1"># Leave no delay between pending -&gt; triggered</span>
      <span class="na">delay_time</span><span class="pi">:</span> <span class="m">0</span>
</code></pre></div></div>

<p>Now that you have the alarm configuration, you need to set up some automations to actually handle transitioning between the states. For example, if the alarm is armed and a door opens, you want to trigger the alarm. Also one the alarm triggers, you want to set off sirens, send notifications, call the police, etc.</p>

<p>Note that you do not want to directly start sending notifications and turning on sirens when the alarm is armed and a door is opened. You may be in <code class="language-plaintext highlighter-rouge">armed_away</code> state and should give some time to disarm the alarm. Thus is best to separate the automation to trigger the alarm and the automation to take actions when the alarm is triggered.</p>

<p>Here are some basic automations to get you started. Note that I use a separate automations.yaml file, so your tabbing may be off and you need the <code class="language-plaintext highlighter-rouge">automation:</code> header if you have it directly in your <code class="language-plaintext highlighter-rouge">configuration.yaml</code>.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Alarm</span><span class="nv"> </span><span class="s">-</span><span class="nv"> </span><span class="s">Trigger</span><span class="nv"> </span><span class="s">when</span><span class="nv"> </span><span class="s">sensors</span><span class="nv"> </span><span class="s">go</span><span class="nv"> </span><span class="s">off"</span>
  <span class="na">trigger</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">binary_sensor.front_door</span>
      <span class="na">to</span><span class="pi">:</span> <span class="s2">"</span><span class="s">on"</span>
    <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">binary_sensor.garage_entry</span>
      <span class="na">to</span><span class="pi">:</span> <span class="s2">"</span><span class="s">on"</span>
    <span class="c1"># Add more triggers here for other doors/windows</span>
  <span class="na">condition</span><span class="pi">:</span>
    <span class="c1"># Only trigger the alarm if it's armed</span>
    <span class="na">condition</span><span class="pi">:</span> <span class="s">or</span>
    <span class="na">conditions</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">condition</span><span class="pi">:</span> <span class="s">state</span>
        <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
        <span class="na">state</span><span class="pi">:</span> <span class="s">armed_home</span>
      <span class="pi">-</span> <span class="na">condition</span><span class="pi">:</span> <span class="s">state</span>
        <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
        <span class="na">state</span><span class="pi">:</span> <span class="s">armed_away</span>
  <span class="na">action</span><span class="pi">:</span>
    <span class="na">service</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm_trigger</span>
    <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>

<span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Alarm</span><span class="nv"> </span><span class="s">-</span><span class="nv"> </span><span class="s">Triggered"</span>
  <span class="na">trigger</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
      <span class="na">to</span><span class="pi">:</span> <span class="s2">"</span><span class="s">triggered"</span>
  <span class="na">action</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">homeassistant.turn_on</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">switch.siren</span>

<span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Alarm</span><span class="nv"> </span><span class="s">-</span><span class="nv"> </span><span class="s">Disarmed"</span>
  <span class="na">trigger</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
      <span class="na">to</span><span class="pi">:</span> <span class="s2">"</span><span class="s">disarmed"</span>
  <span class="na">action</span><span class="pi">:</span>
    <span class="c1"># Turn off the siren once the alarm is disarmed</span>
    <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">homeassistant.turn_off</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">switch.siren</span>
</code></pre></div></div>

<p>Personally, I don’t have the Z-Wave locks auto-arm/disarm the alarm, although you could do that if you wish.</p>

<p>Finally, just add an Alarm Panel card to your Lovelace which points to your <code class="language-plaintext highlighter-rouge">alarm_control_panel</code>.</p>

<p><img src="/assets/alarm-ui.png" alt="Alarm Control Panel UI" class="center" /></p>

<p>And that’s it! At least for the basics. A few more pieces were needed to fully replace my old system and pass the “wife test”.</p>

<h3 id="monitoring-with-noonlight">Monitoring with Noonlight</h3>

<p>One of the primary advantages to paying a security company is that if your alarm goes off, there’s a real human being who will notice and call you to make sure everything is OK, and call the police if it’s not.</p>

<p>Luckily, there’s a company out there called <a href="https://www.noonlight.com/" target="_blank">Noonlight</a> which will do that for free! I’ve tested the system many times, usually accidentally, and they’re incredibly quick (sometimes TOO quick for my many false alarms…) to call to make sure everything is OK. I honestly don’t know how they make money.</p>

<p>To configure this, you’ll first need to add Noonlight to your <a href="https://ifttt.com/" target="_blank">IFTTT</a> account, and enable the <a href="https://www.home-assistant.io/integrations/ifttt/" target="_blank">IFTTT integration in Home Assistant</a> for sending events. For the latter, the configuration should look like:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">ifttt</span><span class="pi">:</span>
  <span class="na">key</span><span class="pi">:</span> <span class="kt">!secret</span> <span class="s">ifttt_key</span>
</code></pre></div></div>

<p>Then, to set up the IFTTT applet, you’ll want to use Webhooks “Receive a web request” as the trigger, and Noonlight’s “Trigger alarm with address” as the action. Be sure to note the Webhooks event name you use. Im my case, I use “alarm_triggered”.</p>

<p>Now you simply need to add this IFTTT trigger action with the correct event name to your alarm trigger automation. Adding to the example used earlier, it looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Alarm</span><span class="nv"> </span><span class="s">-</span><span class="nv"> </span><span class="s">Triggered"</span>
  <span class="na">trigger</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
      <span class="na">to</span><span class="pi">:</span> <span class="s2">"</span><span class="s">triggered"</span>
  <span class="na">action</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">homeassistant.turn_on</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">switch.siren</span>
    <span class="c1"># Trigger IFTTT applet to notify Noonlight</span>
    <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">ifttt.trigger</span>
      <span class="na">data_template</span><span class="pi">:</span>
        <span class="na">event</span><span class="pi">:</span> <span class="s2">"</span><span class="s">alarm_triggered"</span>
</code></pre></div></div>

<h3 id="voice-warnings">Voice warnings</h3>

<p>My old alarm system would emit an audible tone when we came home to warn us that the alarm would be triggering within a minute or two. Originally when I replaced this with the solution described above, my wife and I would forget about it sometimes and then suddenly the siren would go off.</p>

<p>To help remind us, I implemented a warning system when we come home which announces through our Alexa Dot.</p>

<p>To get Alexa voice announcements, I use the <a href="https://github.com/custom-components/alexa_media_player" target="_blank">alexa_media_player</a> custom component.</p>

<p>I decided to get a little fancier with the automation and it warns multiple times during the delay period. To do this I added a timer. I also have an automation to announce when doors and windows open, so I had to add some delays in the warning so that those other automations would run first and not cause Alexa to get interrupted.</p>

<p>Basically when the alarm goes from <code class="language-plaintext highlighter-rouge">armed_away</code> to <code class="language-plaintext highlighter-rouge">pending</code>, I delay for 5 seconds (for the other announce automation not shown here), announce that the alarm needs to be disarmed, then start a timer. That timer is set for 10 seconds and when it triggers it repeats the warning a bit more forcefully and will continue to repeat every 10 seconds until the alarm is disarmed.</p>

<p>Here’s what my revised automations from above look like with these additions.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Alarm</span><span class="nv"> </span><span class="s">-</span><span class="nv"> </span><span class="s">Pending"</span>
  <span class="na">trigger</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
      <span class="na">from</span><span class="pi">:</span> <span class="s2">"</span><span class="s">armed_away"</span> <span class="c1"># No need for armed_home, there's no pending delay there.</span>
      <span class="na">to</span><span class="pi">:</span> <span class="s2">"</span><span class="s">pending"</span>
  <span class="na">action</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">delay</span><span class="pi">:</span> <span class="s">00:00:05</span> <span class="c1"># Small delay for "Announce" automation to run.</span>
    <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">notify.alexa_media</span>
      <span class="na">data</span><span class="pi">:</span>
        <span class="na">target</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">media_player.kitchen</span>
        <span class="na">data</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">announce</span>
        <span class="na">message</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Please</span><span class="nv"> </span><span class="s">disarm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">alarm"</span>
    <span class="c1"># Start a timer to repeat the warning</span>
    <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">timer.start</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">timer.alarm_pending</span>

<span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Alarm</span><span class="nv"> </span><span class="s">-</span><span class="nv"> </span><span class="s">Pending</span><span class="nv"> </span><span class="s">Repeat"</span>
  <span class="na">trigger</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">event</span>
      <span class="na">event_type</span><span class="pi">:</span> <span class="s">timer.finished</span>
      <span class="na">event_data</span><span class="pi">:</span>
        <span class="na">entity_id</span><span class="pi">:</span> <span class="s">timer.alarm_pending</span>
  <span class="na">condition</span><span class="pi">:</span>
    <span class="na">condition</span><span class="pi">:</span> <span class="s">state</span>
    <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
    <span class="na">state</span><span class="pi">:</span> <span class="s">pending</span>
  <span class="na">action</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">notify.alexa_media</span>
      <span class="na">data</span><span class="pi">:</span>
        <span class="na">target</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">media_player.kitchen</span>
        <span class="na">data</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">announce</span>
        <span class="na">message</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Disarm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">alarm</span><span class="nv"> </span><span class="s">now!"</span>
    <span class="c1"># Restart the timer</span>
    <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">timer.start</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">timer.alarm_pending</span>

<span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Alarm</span><span class="nv"> </span><span class="s">-</span><span class="nv"> </span><span class="s">Disarmed"</span>
  <span class="na">trigger</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">alarm_control_panel.alarm</span>
      <span class="na">to</span><span class="pi">:</span> <span class="s2">"</span><span class="s">disarmed"</span>
  <span class="na">action</span><span class="pi">:</span>
    <span class="c1"># Turn off the siren once the alarm is disarmed</span>
    <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">homeassistant.turn_off</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">switch.siren</span>
    <span class="c1"># Stop the warning repeat timer</span>
    <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">timer.cancel</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">timer.alarm_pending</span>
</code></pre></div></div>

<p>The timer looks like this (directly in configuration.yaml).</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">timer</span><span class="pi">:</span>
  <span class="c1"># Used to repeat notifications that the alarm needs to be disarmed</span>
  <span class="na">alarm_pending</span><span class="pi">:</span>
    <span class="na">duration</span><span class="pi">:</span> <span class="s2">"</span><span class="s">00:00:10"</span>
</code></pre></div></div>

<h2 id="mounted-alarm-panel">Mounted alarm panel</h2>

<p>The final step in this project was to set up a wall panel so that we didn’t have to use our phones to disarm the alarm.</p>

<p><img src="/assets/alarm-panel-mounted.jpg" alt="Mounted alarm panel" class="center" /></p>

<p>For this, I bought another Raspberry Pi 3 B+, as well as a <a href="https://www.amazon.com/gp/product/B0153R2A9I?&amp;_encoding=UTF8&amp;tag=dfederm-20&amp;linkCode=ur2&amp;linkId=1bf8af125902da507a8ec5b33c13a48c&amp;camp=1789&amp;creative=9325" target="_blank" rel="nofollow">touch screen Display</a> and
<a href="https://www.amazon.com/gp/product/B01GQFUWIC?&amp;_encoding=UTF8&amp;tag=dfederm-20&amp;linkCode=ur2&amp;linkId=3264a494aada7c4006f0b79b44f8a97c&amp;camp=1789&amp;creative=9325" target="_blank" rel="nofollow">touch screen Case</a>. Mounting a tablet probably would have been just as easy and cheaper if I already had an old one lying around, but I didn’t.</p>

<p>There are plenty of guides out there for setting up a Raspberry Pi in kiosk mode, and I honestly wouldn’t consider myself an expert in this area, but the gist is that I installed Raspbian Lite, setup ssh for easy remoting, installed <code class="language-plaintext highlighter-rouge">chromium-browser</code>, and added the following to <code class="language-plaintext highlighter-rouge">~/.config/lxsession/LXDE/autostart</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Prevent screen blanking</span>
@xset s off
@xset <span class="nt">-dpms</span>
@xset s noblank

<span class="c"># Ensure chromium thinks it shut down cleanly, even if it didn't to prevent tab restore warnings.</span>
@sed <span class="nt">-i</span> <span class="s1">'s/"exited_cleanly": false/"exited_cleanly": true/'</span> ~/.config/chromium/Default/Preferences
@sed <span class="nt">-i</span> <span class="s1">'s/"exit_type":"Crashed"/"exit_type":"Normal"/'</span> ~/.config/chromium/Default/Preferences

<span class="c"># Launch the web browser in kiosk mode</span>
@chromium-browser <span class="nt">--kiosk</span> <span class="nt">--disable-translate</span> <span class="nt">--noerrdialogs</span> <span class="nt">--disable-pinch</span> https://&lt;url-to-my-home-assistant&gt;/lovelace/1
</code></pre></div></div>

<p>Note the url used when launching chromium. I used my external hostname so that chromium doesn’t complain about the SSL cert, but I use a <a href="https://pi-hole.net/" target="_blank">Pi-hole</a> to redirect that host to the local IP anyway so it’s not actually calling externally. There might have been an easier way to bypass the cert error and use the local IP directly, but this worked for me. Also note that the <code class="language-plaintext highlighter-rouge">/lovelace/1</code> path is so that it shows my 2nd Lovelace tab, which is the one I have the alarm panel card on.</p>

<p>Upon first boot you’ll have to log in, so be sure to attach a keyboard and mouse before mounting. I set up a separate user in Home Assistant to log into the alarm panel so that it didn’t run as my user, an Administrator (although Home Assistant doesn’t have very granular permissions; maybe in the future). And although I haven’t set it up yet, now that Home Assistant has <a href="https://www.home-assistant.io/blog/2020/03/18/release-107/#hello-multiple-lovelace-dashboards" target="_blank">multiple Lovelace dashboards</a>, I could easily add a specific dashboard for this scenario.</p>]]></content><author><name>Iwan Setiawan</name></author><category term="Home Automation" /><category term="Self Hosting" /><category term="automation" /><category term="home assistant" /><category term="home automation" /><category term="smart home" /><category term="ifttt" /><category term="z-wave" /><summary type="html"><![CDATA[Update Jun 3, 2020: Adjusted for breaking changes in version 0.110.]]></summary></entry><entry><title type="html">Authoring MSBuild Project SDKs</title><link href="http://192.168.5.71:4000/.net/msbuild/nuget/2020/02/13/authoring-msbuild-project-sdks/" rel="alternate" type="text/html" title="Authoring MSBuild Project SDKs" /><published>2020-02-13T00:00:00+07:00</published><updated>2020-02-13T00:00:00+07:00</updated><id>http://192.168.5.71:4000/.net/msbuild/nuget/2020/02/13/authoring-msbuild-project-sdks</id><content type="html" xml:base="http://192.168.5.71:4000/.net/msbuild/nuget/2020/02/13/authoring-msbuild-project-sdks/"><![CDATA[<p>You may have seen the term “SDK-style projects” referring to MSBuild projects which have an <code class="language-plaintext highlighter-rouge">Sdk</code> attribute on the root <code class="language-plaintext highlighter-rouge">&lt;Project&gt;</code> element, and generally are associated with .NET Core projects. This article explains how they work and when and how you should author your own.</p>

<h2 id="what-is-it">What is it?</h2>
<p>First, what exact is an MSBuild project SDK? They’re a new mechanism introduced in MSBuild 15 (Visual Studio 2017) which simplifies how MSBuild logic is injected into projects. Historically, projects would contain an <code class="language-plaintext highlighter-rouge">&lt;Import&gt;</code> to a common props file at the top and a common targets file specific to their project type. For example, C# projects imported <code class="language-plaintext highlighter-rouge">$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props</code> at the top and <code class="language-plaintext highlighter-rouge">$(MSBuildToolsPath)\Microsoft.CSharp.targets</code> at the bottom. This “props at the top, targets at the bottom” was such a common pattern for basically every project type, and so easy to get wrong for MSBuild novices, that the concept of <code class="language-plaintext highlighter-rouge">Sdk</code> was introduced.</p>

<h2 id="how-does-it-work">How does it work?</h2>
<p>The documentation on <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-use-project-sdk#reference-a-project-sdk" target="_blank">docs.microsoft.com</a> for MSBuild project SDKs is excellent, and I highly recommend using it as your primary reference for understanding how to use them.</p>

<p>The gist however is that when using either the <code class="language-plaintext highlighter-rouge">Sdk</code> attribute on the root <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/project-element-msbuild" target="_blank"><code class="language-plaintext highlighter-rouge">&lt;Project&gt;</code> element</a> (eg: <code class="language-plaintext highlighter-rouge">&lt;Project Sdk="..."&gt;</code>), or the <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/sdk-element-msbuild" target="_blank"><code class="language-plaintext highlighter-rouge">&lt;Sdk&gt;</code> element</a> directly, the associated props and targets files will implicitly be imported at the top and bottom of the file they’re used in. This is usually a project file but not necessarily.</p>

<p>So when you see syntax like <code class="language-plaintext highlighter-rouge">&lt;Project Sdk="Microsoft.NET.Sdk"&gt;</code>, it’s the same (even internally within MSBuild) as:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Project&gt;</span>
  <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">"{Path to Microsoft.NET.Sdk}\Sdk\Sdk.props"</span> <span class="nt">/&gt;</span>

  <span class="c">&lt;!-- The rest of the project file --&gt;</span>

  <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">"{Path to Microsoft.NET.Sdk}\Sdk\Sdk.targets"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/Project&gt;</span>
</code></pre></div></div>

<p>Similarly, when you see syntax like:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Project&gt;</span>
  <span class="c">&lt;!-- Content above the &lt;Sdk&gt; element --&gt;</span>
  <span class="nt">&lt;Sdk</span> <span class="na">Name=</span><span class="s">"MyCustomSdk"</span> <span class="nt">/&gt;</span>
  <span class="c">&lt;!-- Content below the &lt;Sdk&gt; element --&gt;</span>
<span class="nt">&lt;/Project&gt;</span>
</code></pre></div></div>

<p>It’s equivalent to:</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Project&gt;</span>
  <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">"{Path to MyCustomSdk}\Sdk\Sdk.props"</span> <span class="nt">/&gt;</span>
  <span class="c">&lt;!-- Content above the &lt;Sdk&gt; element --&gt;</span>
  <span class="c">&lt;!-- Content below the &lt;Sdk&gt; element --&gt;</span>
  <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">"{Path to MyCustomSdk}\Sdk\Sdk.target"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/Project&gt;</span>
</code></pre></div></div>

<p>Note how the location of the <code class="language-plaintext highlighter-rouge">&lt;Sdk&gt;</code> element does not matter; the props and targets are still at the top and bottom.</p>

<h2 id="project-sdk-resolution">Project SDK resolution</h2>
<p>MSBuild uses a plugin model for resolving SDKs and two SDK resolvers ship with Visual Studio. Note that although it is technically a plugin model, it is not recommended to write your own SDK resolver as that would require anyone using it to install something custom into their Visual Studio installation which is no longer the recommended approach for extending your build. For referene though, the SDK resolvers can be found adjacent to MSBuild.exe under a folder called <code class="language-plaintext highlighter-rouge">SdkResolvers</code></p>

<p>The two SDK resolvers that ship with Visual Studio and dotnet CLI are: <code class="language-plaintext highlighter-rouge">Microsoft.DotNet.MSBuildSdkResolver</code> and <code class="language-plaintext highlighter-rouge">Microsoft.Build.NuGetSdkResolver</code>.</p>

<p><code class="language-plaintext highlighter-rouge">Microsoft.DotNet.MSBuildSdkResolver</code> is what resolves “built in” SDKs like <code class="language-plaintext highlighter-rouge">Microsoft.NET.Sdk</code> and <code class="language-plaintext highlighter-rouge">Microsoft.NET.Sdk.Web</code>. It first looks for your dotnet CLI (eg <code class="language-plaintext highlighter-rouge">C:\Program Files\dotnet\dotnet.exe</code>), then resolves the active dotnet SDK based on your <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/global-json#sdk" target="_blank">global.json</a> if one exists or the latest one installed (eg <code class="language-plaintext highlighter-rouge">C:\Program Files\dotnet\sdk\3.1.101</code>). Once it finds the dotnet SDK, it looks for the SDKs in the <code class="language-plaintext highlighter-rouge">Sdks</code> directory. So <code class="language-plaintext highlighter-rouge">Microsoft.NET.Sdk</code> may be located at a path similar to <code class="language-plaintext highlighter-rouge">C:\Program Files\dotnet\sdk\3.1.101\Sdks\Microsoft.NET.Sdk</code>.</p>

<p><code class="language-plaintext highlighter-rouge">Microsoft.Build.NuGetSdkResolver</code>, or the “NuGet SDK Resolver”, is the where MSBuild project SDKs become extensible. This SDK resolver will pull an SDK as a NuGet package from any configured NuGet feed. You can write your own MSBuild project SDK NuGet package for others to use.</p>

<p>Note that the NuGet SDK Resolver does require a version to be specified, either in the MSBuild XML for the SDK, or in <code class="language-plaintext highlighter-rouge">global.json</code> in the <code class="language-plaintext highlighter-rouge">msbuild-sdks</code> object.</p>

<p>It is important to realize that SDK resolution happens at MSBuild evaluation time. This means that the NuGet SDK Resolver will potentially download package while MSBuild is evaluating a project, which happens before a restore even. One way to think of it would even be a “restore before the restore”. Because of this however, it’s important that MSBuild project SDK NuGet packages are very lightweight in size, and that they are not overused.</p>

<h2 id="when-you-should-create-one">When you should create one</h2>
<p>NuGet packages already have the ability to extend, augment, and customize your build. You can just drop a <code class="language-plaintext highlighter-rouge">/build/&lt;package name&gt;.props</code> and/or <code class="language-plaintext highlighter-rouge">/build/&lt;package name&gt;.targets</code> file in your NuGet package, and anyone with a <code class="language-plaintext highlighter-rouge">&lt;PackageReference&gt;</code> for your package get those automatically imported. For example the <code class="language-plaintext highlighter-rouge">Microsoft.Net.Compilers</code> package does this to completely override the default compiler targets and tasks with one from the package, taking over the compilation process.</p>

<p>And in general when you want to extend the build, you <em>should</em> use that mechanism for doing so. However, it is recommended to write an MSBuild project SDK when either a) you’re defining your own completely new project type, or b) you’re extending restore for projects.</p>

<h3 id="defining-your-own-project-type">Defining your own project type</h3>
<p>If the core behavior of the project doesn’t fit into any of the existing SDKs like buildfing a C# project or building a web application, it may be a good scenario for writing your own MSBuild project SDK. In this scenario, it’s generally consumed by declaring it in the project file’s <code class="language-plaintext highlighter-rouge">&lt;Project&gt;</code> element.</p>

<p>Some examples of defining a custom project type are <a href="https://github.com/microsoft/MSBuildSdks/tree/master/src/Traversal" target="_blank">Microsoft.Build.Traversal</a> and <a href="https://github.com/microsoft/MSBuildSdks/tree/master/src/NoTargets" target="_blank">Microsoft.Build.NoTargets</a>. The former is intended for projects which simply allow MSBuild to discover other projects but have no build logic of their own, and the latter is for project which perform a simple task instead of compilation, like copying files around.</p>

<h3 id="extending-the-restore">Extending the restore</h3>
<p>If an MSBuild project SDK needs to extend the behavior of restore, usually it’s used as a standalone <code class="language-plaintext highlighter-rouge">&lt;Sdk&gt;</code> element, since the project as a whole will likely have the <code class="language-plaintext highlighter-rouge">&lt;Project&gt;</code> element’s SDK attribute aligned with its project type. This isn’t always the case though as the <code class="language-plaintext highlighter-rouge">&lt;Project Sdk="..."&gt;</code> syntax does support a semicolon-delimeted list of SDKs, however this is atypical and for maintainability and understandability generally frowned upon. Additionally, you’ll typically want to extend restore for all projects rather than just one, so it usually makes the most sense to add the SDK in your <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build#directorybuildprops-and-directorybuildtargets" target="_blank">Directory.Build.props or Directory.Build.targets</a> files.</p>

<p>An example of extending the restore process is <a href="https://github.com/microsoft/MSBuildSdks/tree/master/src/CentralPackageVersions" target="_blank">Microsoft.Build.CentralPackageVersions</a>.</p>

<p>To elaborate on why you need to use an MSBuild project SDK to extend the restore process, you need to understand how restore works a bit. Fully explaining restore will need to be a separate topic completely, but at a high level restore will gather all the <code class="language-plaintext highlighter-rouge">&lt;PackageReference&gt;</code> items, download and inspect the package, and generate a <code class="language-plaintext highlighter-rouge">*.nuget.g.props</code>, <code class="language-plaintext highlighter-rouge">*.nuget.g.targets</code>, and a <code class="language-plaintext highlighter-rouge">project.assets.json</code> file. The props and targets files import the props or targets files inside those packages by convention. <code class="language-plaintext highlighter-rouge">&lt;PackageReference&gt;</code> items are not used at all during the build at all, the generated files are. Thus, any <code class="language-plaintext highlighter-rouge">&lt;PackageReference&gt;</code> items inside of props or targets files from packages are ignored and do not affect the build. Furthermore, any updates to <code class="language-plaintext highlighter-rouge">&lt;PackageReference&gt;</code> items or changes in Restore behavior from a packages’ props and targets would not behave as expected.</p>

<p>One caveat to that is if you restore multiple times in a row, as then the initial <code class="language-plaintext highlighter-rouge">&lt;PackageReference&gt;</code> items cause the generated props and targets files to be generated and contain <code class="language-plaintext highlighter-rouge">&lt;PackageReference&gt;</code> items which can then be discovered in a second restore, and this can go on recursively. However, Visual Studio and the dotnet CLI, as well as most CI systems, do not expect to need to restore multiple times for a build to work correctly. I only mention this though since anecdotally I’ve seen it cause many “works on my machine” moments since developers work in dirty enlistments which have previously been restored.</p>

<h2 id="package-structure">Package structure</h2>
<p>Finally, after all that context, I will explain how to actually author MSBuild project SDK NuGet packages. It’s actually quite simple; all you need is an <code class="language-plaintext highlighter-rouge">Sdk\Sdk.props</code> and <code class="language-plaintext highlighter-rouge">Sdk\Sdk.targets</code> file in the package.</p>

<p>Unlike NuGet package with props and targets, both the props and targets files are required. If you only need one, you can simply have <code class="language-plaintext highlighter-rouge">&lt;Project /&gt;</code> as the content of the other, but it must exist and must be a valid MSBuild project.</p>

<p>It’s important to note that MSBuild project SDKs do not inherit the behavior of <code class="language-plaintext highlighter-rouge">&lt;PackageReference&gt;</code> items. For example, assemblies under <code class="language-plaintext highlighter-rouge">lib\{tfm}</code> aren’t added as references. The only behavior is that <code class="language-plaintext highlighter-rouge">Sdk\Sdk.props</code> and <code class="language-plaintext highlighter-rouge">Sdk\Sdk.targets</code> are imported at the top and bottom. Because of this, I’d recommend that if you need to add references to create a separate package which your MSBuild project SDK adds a <code class="language-plaintext highlighter-rouge">&lt;PackageReference&gt;</code> item for.</p>

<p>The <a href="https://github.com/microsoft/MSBuildSdks" target="_blank">MSBuildSdks repo on GitHub</a> has a bunch of great examples of well-written MSBuild project SDKs and define a few useful patterns which may be useful to other SDK authors. For example, I’d recommend adding a <code class="language-plaintext highlighter-rouge">&lt;Using*Sdk&gt;</code> property to help identify whether a particular SDK is in use. Microsoft.Build.NoTargets sets <code class="language-plaintext highlighter-rouge">UsingMicrosoftNoTargetsSdk</code> and the built-in Microsoft.Net.Sdk sets <code class="language-plaintext highlighter-rouge">UsingMicrosoftNETSdk</code>.</p>]]></content><author><name>Iwan Setiawan</name></author><category term=".NET" /><category term="MSBuild" /><category term="NuGet" /><category term=".NET" /><category term="nuget" /><category term="msbuild" /><category term="sdk" /><summary type="html"><![CDATA[You may have seen the term “SDK-style projects” referring to MSBuild projects which have an Sdk attribute on the root &lt;Project&gt; element, and generally are associated with .NET Core projects. This article explains how they work and when and how you should author your own.]]></summary></entry><entry><title type="html">Migrating from WebCORE to Home Assistant</title><link href="http://192.168.5.71:4000/home%20automation/self%20hosting/2019/07/11/migrating-from-webcore-to-home-assistant/" rel="alternate" type="text/html" title="Migrating from WebCORE to Home Assistant" /><published>2019-07-11T00:00:00+07:00</published><updated>2019-07-11T00:00:00+07:00</updated><id>http://192.168.5.71:4000/home%20automation/self%20hosting/2019/07/11/migrating-from-webcore-to-home-assistant</id><content type="html" xml:base="http://192.168.5.71:4000/home%20automation/self%20hosting/2019/07/11/migrating-from-webcore-to-home-assistant/"><![CDATA[<p>About a month ago I decided to migrate all my home automation from <a href="https://www.webcore.co/" target="_blank">WebCORE</a> to <a href="https://home-assistant.io" target="_blank">Home Assistant</a>. I liked the idea of all my home automation being local and inside my house, both from a security and reliability perspective. Furthermore it just seemed like a fun project to tinker with, and in general seemed like it would add a bunch of flexibility to my home automation. In this post I’ll describe my experience with the migration, the good and the bad.</p>

<p>However I do want to start with saying that I think the migration was worth it for me, but it had quite a few challenges and I have quite a few criticisms for Home Assistant. It was a significant time investment and required a lot of tinkering and trial and error, so if you’re considering doing this yourself just be aware of that.</p>

<h2 id="initial-state">Initial state</h2>
<p>First to describe my initial setup. For equipment I have:</p>
<ul>
  <li>SmartThings hub</li>
  <li>Hue hub</li>
  <li>Three Alexa dots</li>
  <li>Ten Z-Wave light switches</li>
  <li>Ten Hue lights</li>
  <li>Two Z-Wave door locks</li>
  <li>Motion sensor</li>
</ul>

<p>Additionally, I have a handful of pistons configured with WebCORE (that’s what it calls its automations) and presence sensors using the SmartThings app on my wife’s phone and my phone to trigger the “Home” and “Away” home states.</p>

<h2 id="installation-of-home-assistant">Installation of Home Assistant</h2>
<p>I wanted to start with the easiest and most hand-holding Home Assistant configuration possible, so I bought a <a href="https://www.amazon.com/gp/product/B07BCC8PK7?&amp;_encoding=UTF8&amp;tag=dfederm-20&amp;linkCode=ur2&amp;linkId=10c93503e3e1c8fa6069d1103e696798&amp;camp=1789&amp;creative=9325" target="_blank" rel="nofollow">Raspberry Pi starter kit</a> ($80). I knew that I could get it cheaper if I got the parts separately, but as this was my first experience with a Raspberry Pi, I decided to go with a kit. Assembling the Raspberry Pi was definitely a smooth and easy process.</p>

<p>I then proceeded to <a href="https://www.home-assistant.io/getting-started/#installing-hassio" target="_blank">install Hass.io</a>. The instructions are easy enough to follow, but on first boot I ended up getting stuck. It might have been a patience issue, but eventually after a combination of restarts of the Pi, trying to access via IP address, and flushing my computer’s DNS lead to successfully being able to access the web UI.</p>

<h2 id="add-ons">Add-ons</h2>
<p>Next I wanted to set up some of the basic add-ons. I wanted remote access (especially from my phone), so I installed the DuckDNS addon and it was one of the smoother steps in this process. It just worked, although I did change my mind on the DuckDNS subdomain to use and Hass.io seemed to get confused by that. Uninstalling and reinstalling the add-on fixed everything up.</p>

<p>I also wanted to more easily edit my configuration files in a text-editor so installed the Samba add-on. The config UI was unclear to me (a common criticism during this whole process) and so I had a little trouble with the configuration, compounded by an extremely unclear error message (another common criticism), but eventually after going to the documentation for the <a href="https://www.home-assistant.io/addons/samba/" target="_blank">Samba</a> add-on, the configuration became more clear and was easy to set up from there. As a side note, personally I’m just not a fan of yaml. I know it’s the go-to for configuration, but I just find it hard to read and edit.</p>

<h2 id="integrations-and-components">Integrations and Components</h2>
<p>At this point I wanted to actually start setting up my smart devices and controlling them from Home Assistant. Most my devices were managed through SmartThings, so I started there. I have to say that this was probably the most challenging part of this process. The first step in setting up the integration is to provide a SmartThings PAT, which I did, but ended up with the error: “<em>The <code class="language-plaintext highlighter-rouge">base_url</code> for the <code class="language-plaintext highlighter-rouge">http</code> component must be configured and start with <code class="language-plaintext highlighter-rouge">https://</code>.</em>” Looking back, now that I understand Home Assistant better, I can parse it better, but to a newbie I was lost. Eventually I found that I needed to add some <a href="https://www.home-assistant.io/components/http#base_url" target="_blank">configuration</a> to my configuration.yaml. The next problem I ran into was adding the SmartApp in SmartThings. Every time I tried adding it, it told me it could not connect. Eventually I turned off DNS66 (Host-based adblocker for Android) and it seemed to make progress. At that point I could control my SmartThings devices from Home Assistant, but for whatever reason I could not get Home Assistant to update the status when I turned lights on or off outside of Home Assistant (manually, via Alexa, or via SmartThings). I saw errors about unregistered webhooks, so I suspect SmartThings was attempting to update Home Assistant, but Home Assistant lost some configuration about the webhook SmartThings was using. I eventually just removed and re-added the integration and things started working from there.</p>

<p>Phillips Hue was much more straightforward and after SmartThings this integration was extremely easy to set up.</p>

<p>Next I tried setting up presence, called device trackers in Home Assistant. The Getting Started docs were fairly hard to follow, but I eventually successfully enabled OwnTracks after lots of guesswork. After a few days I noticed that OwnTracks is pretty inaccurate, so using a fairly large radius for Zones is important. Don’t expect to walk to your neighbors’ and expect it to detect you as away. I looked into the Google Maps Location Sharing component instead, but the setup is pretty hacky (involves setting up a dummy Google account) and at the end of the day I just couldn’t get it working at all. After tweaking the OwnTracks settings over a week or two and learning its limitations, I feel like it’s now in a usable state. I’ve learned that reliable and accurate presence using your phone’s GPS is just a hard problem to solve (unless you want to just kill your phone’s battery), so in the future I may look into layering in other presence signals like Wifi connection to my router. This is possible with the fairly recent addition of the <a href="https://www.home-assistant.io/components/person/" target="_blank">Person</a> component.</p>

<p>Related to presence, I set up <a href="https://www.home-assistant.io/components/zone/" target="_blank">Zones</a> for Home, Work, and my in-laws’ house. It would be nice to have a better UI, for example just typing in an address and it giving you the lat/long, but you can do that through Google/Bing maps as well. It just would be nice to do it within Home Assistant directly. Besides that and the earlier mentioned need to have a larger-than-expected radius, Zones are pretty easy to work with and I find it quite useful.</p>

<p>As this process took a month, my wife and I ended up impulse purchasing an <a href="https://www.ecobee.com/ecobee3-lite/" target="_blank">ecobee3 lite</a> from Costco since it was on sale. The setup of the thermostat itself and the integration into Home Assistant were both very easy and I have no complaints.</p>

<h2 id="automations">Automations</h2>
<p>Next I wanted to to what the title of this post suggests, actually migrate my automations from WebCORE to Home Assistant. I found that the UI for this really sucks and found myself very quickly just dealing with the yaml directly. I did find the documentation very hard to dig through, but eventually figured out the basic syntax. Still, the logging and debugging for automations is not great and I think that’s one advantage WebCORE has over Home Assistant.</p>

<p>Global state is also a little more awkward to manage in Home Assistant than WebCORE. In WebCORE there is a notion of global variables directly, but in Home Assistant you have to fake it using an input one would typically use in the UI to control you devices.</p>

<p>I also found that Home Assistant’s templating leaves a bit to be desired. It’s not documented in a very helpful way and I found myself needing to do lots of trial and error in the Developer Tools Templates page. Specifically, I have an automation to cap the brightness level for my dimable lights to 80% (ie. if their brightness changes to &gt; 80%, set it to 80%). In WebCORE this was fairly straightforward, but in Home Assistant it’s something more like…</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">Max light brightness</span>
  <span class="na">hide_entity</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">initial_state</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
  <span class="na">trigger</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
      <span class="na">entity_id</span><span class="pi">:</span> <span class="s">... long list of lights ...</span>
  <span class="na">condition</span><span class="pi">:</span>
    <span class="na">condition</span><span class="pi">:</span> <span class="s">template</span>
    <span class="na">value_template</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">(100</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">trigger.to_state.attributes.brightness|float</span><span class="nv"> </span><span class="s">/</span><span class="nv"> </span><span class="s">255)</span><span class="nv"> </span><span class="s">&gt;</span><span class="nv"> </span><span class="s">states.input_number.max_brightness.state|float</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">action</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">light.turn_on</span>
      <span class="na">data_template</span><span class="pi">:</span>
        <span class="na">brightness_pct</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">states.input_number.max_brightness.state</span><span class="nv"> </span><span class="s">|</span><span class="nv"> </span><span class="s">int</span><span class="nv"> </span><span class="s">}}"</span>
        <span class="na">entity_id</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">trigger.entity_id</span><span class="nv"> </span><span class="s">}}"</span>
</code></pre></div></div>

<p>It might just be my inexperience with Home Assistant, but I found it very difficult to simply check if the brightness of the triggering device was above some configured max and if so set it to that configured max.</p>

<h2 id="lovelace-ui">Lovelace UI</h2>
<p>I haven’t had a chance to heavily customize the UI, but from what I have done so far, and from what the demos show me I can do, it looks extremely powerful and flexible. This alone adds a ton of value to Home Assistant as it opens up so many scenarios, such as mounting a tablet running a browser in kiosk mode as a control panel for your home. Another scenario being to flash the WyzeCams I currently have (which are currently not really connected to the rest of my smart home in any way) with the firmware which supports RTSP and adding them to the Home Assistant UI. There are a ton of possibilities here and I’m pretty excited to explore this are more in the future.</p>

<h2 id="hassio-updates">Hass.io Updates</h2>
<p>I also noticed over the past month that Home Assistant updates are a little destabilizing. It’s really great that updates are frequent and as a software developer myself I appreciate the quick updates and even the need to deprecate features in favor of better ways to do things, but I did find that the updates did break things for me from time to time. Perhaps if some migration scripts would run automatically, or there were clear instructions on the blog of how to migrate it wouldn’t be so bad, but I found that it was more like “this is deprecated in favor of that, figure it out yourself”. Specifically in my case I believe my OwnTracks device trackers were duplicated (suffixed with “_2”) and the originals were just stuck in their last state. This led to presence detection just being broken until I went in, deleted the originals, and renamed the dupes. Little things like that could use a little more polish I think.</p>

<h2 id="next-steps">Next Steps</h2>
<p>My initial goal was to migrate from WebCore to Home Assistant, which I succeeded in, but I realized that I do need to take it a bit further to really get what I wanted out of it. For example, my devices are still primarily controlled through SmartThings, and Home Assistant talks to SmartThings via the SmartThings cloud (as opposed to directly talking to the hub on my LAN…), so my dream of everything being 100% local isn’t quite realized. Automations can still be delayed as SmartThings devices signal to my hub to update the cloud to webhook back to my house in Home Assistant and finally trigger the automation, which take action on a SmartThings device which has to make another trip through the internet.</p>

<p>The full list of my future plans include:</p>
<ol>
  <li>Migrate from SmartThings to a local Z-Wave controller (USB stick plugged into my Hass.io RPi, likely the <a href="https://www.amazon.com/Aeotec-Z-Stick-Z-Wave-create-gateway/dp/B00X0AWA6E?&amp;_encoding=UTF8&amp;tag=dfederm-20&amp;linkCode=ur2&amp;linkId=869c4575443e0b07f2c392ad2e544376&amp;camp=1789&amp;creative=9325" target="_blank" rel="nofollow">Aeotech Z-Stick</a>) and managed completely locally my Home Assistant.</li>
  <li>Alexa integration with Home Assistant (via <a href="https://github.com/auchter/haaska" target="_blank">Haaska</a>), a likely pre-req for moving to the local Z-Wave controller.</li>
  <li>Migrate my ADT wireless-but-not-smart security system to Home Assistant. Both so I have more control (ADT really doesn’t want me fiddling with the devices <strong>I own</strong>), better expandability (integration with my existing smart locks), and because ADT just charges way too much for what they provide ($66/month for basic burglar monitoring, no smart devices, no cameras, no fire/smoke). I’ll likely move to <a href="https://noonlight.com/" target="_blank">Noonlight</a> which I read costs only $3/month and they provide integrations like IFTTT that I can trigger however I want to get them to contact the police for me.</li>
  <li>Integrate my WyzeCams into my Home Assistant by flashing them with the RTSP-enabled firmware</li>
  <li>Alexa TTS (if possible) to use Alexa as a general-purpose speaker to announce things like people in my home arriving.</li>
  <li>Generally explore more in the home automation space
But those are for a future blog post!</li>
</ol>]]></content><author><name>Iwan Setiawan</name></author><category term="Home Automation" /><category term="Self Hosting" /><category term="alexa" /><category term="automation" /><category term="home assistant" /><category term="home automation" /><category term="smart home" /><category term="webcore" /><category term="z-wave" /><summary type="html"><![CDATA[About a month ago I decided to migrate all my home automation from WebCORE to Home Assistant. I liked the idea of all my home automation being local and inside my house, both from a security and reliability perspective. Furthermore it just seemed like a fun project to tinker with, and in general seemed like it would add a bunch of flexibility to my home automation. In this post I’ll describe my experience with the migration, the good and the bad.]]></summary></entry></feed>